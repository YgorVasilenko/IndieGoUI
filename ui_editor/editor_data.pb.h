// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_editor_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_editor_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_editor_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_editor_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_editor_5fdata_2eproto;
namespace editor_serialization {
class CropsData;
struct CropsDataDefaultTypeInternal;
extern CropsDataDefaultTypeInternal _CropsData_default_instance_;
class SerializedCropsData;
struct SerializedCropsDataDefaultTypeInternal;
extern SerializedCropsDataDefaultTypeInternal _SerializedCropsData_default_instance_;
class region;
struct regionDefaultTypeInternal;
extern regionDefaultTypeInternal _region_default_instance_;
}  // namespace editor_serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::editor_serialization::CropsData* Arena::CreateMaybeMessage<::editor_serialization::CropsData>(Arena*);
template<> ::editor_serialization::SerializedCropsData* Arena::CreateMaybeMessage<::editor_serialization::SerializedCropsData>(Arena*);
template<> ::editor_serialization::region* Arena::CreateMaybeMessage<::editor_serialization::region>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace editor_serialization {

// ===================================================================

class region final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:editor_serialization.region) */ {
 public:
  inline region() : region(nullptr) {}
  ~region() override;
  explicit PROTOBUF_CONSTEXPR region(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  region(const region& from);
  region(region&& from) noexcept
    : region() {
    *this = ::std::move(from);
  }

  inline region& operator=(const region& from) {
    CopyFrom(from);
    return *this;
  }
  inline region& operator=(region&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const region& default_instance() {
    return *internal_default_instance();
  }
  static inline const region* internal_default_instance() {
    return reinterpret_cast<const region*>(
               &_region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(region& a, region& b) {
    a.Swap(&b);
  }
  inline void Swap(region* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<region>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const region& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const region& from) {
    region::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(region* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "editor_serialization.region";
  }
  protected:
  explicit region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 4;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:editor_serialization.region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float w_;
    float h_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_editor_5fdata_2eproto;
};
// -------------------------------------------------------------------

class CropsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:editor_serialization.CropsData) */ {
 public:
  inline CropsData() : CropsData(nullptr) {}
  ~CropsData() override;
  explicit PROTOBUF_CONSTEXPR CropsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CropsData(const CropsData& from);
  CropsData(CropsData&& from) noexcept
    : CropsData() {
    *this = ::std::move(from);
  }

  inline CropsData& operator=(const CropsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CropsData& operator=(CropsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CropsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CropsData* internal_default_instance() {
    return reinterpret_cast<const CropsData*>(
               &_CropsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CropsData& a, CropsData& b) {
    a.Swap(&b);
  }
  inline void Swap(CropsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CropsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CropsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CropsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CropsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CropsData& from) {
    CropsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CropsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "editor_serialization.CropsData";
  }
  protected:
  explicit CropsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCropNameFieldNumber = 1,
    kCropFieldNumber = 2,
  };
  // string crop_name = 1;
  void clear_crop_name();
  const std::string& crop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crop_name();
  PROTOBUF_NODISCARD std::string* release_crop_name();
  void set_allocated_crop_name(std::string* crop_name);
  private:
  const std::string& _internal_crop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crop_name(const std::string& value);
  std::string* _internal_mutable_crop_name();
  public:

  // .editor_serialization.region crop = 2;
  bool has_crop() const;
  private:
  bool _internal_has_crop() const;
  public:
  void clear_crop();
  const ::editor_serialization::region& crop() const;
  PROTOBUF_NODISCARD ::editor_serialization::region* release_crop();
  ::editor_serialization::region* mutable_crop();
  void set_allocated_crop(::editor_serialization::region* crop);
  private:
  const ::editor_serialization::region& _internal_crop() const;
  ::editor_serialization::region* _internal_mutable_crop();
  public:
  void unsafe_arena_set_allocated_crop(
      ::editor_serialization::region* crop);
  ::editor_serialization::region* unsafe_arena_release_crop();

  // @@protoc_insertion_point(class_scope:editor_serialization.CropsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crop_name_;
    ::editor_serialization::region* crop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_editor_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SerializedCropsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:editor_serialization.SerializedCropsData) */ {
 public:
  inline SerializedCropsData() : SerializedCropsData(nullptr) {}
  ~SerializedCropsData() override;
  explicit PROTOBUF_CONSTEXPR SerializedCropsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedCropsData(const SerializedCropsData& from);
  SerializedCropsData(SerializedCropsData&& from) noexcept
    : SerializedCropsData() {
    *this = ::std::move(from);
  }

  inline SerializedCropsData& operator=(const SerializedCropsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedCropsData& operator=(SerializedCropsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedCropsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedCropsData* internal_default_instance() {
    return reinterpret_cast<const SerializedCropsData*>(
               &_SerializedCropsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializedCropsData& a, SerializedCropsData& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedCropsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedCropsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedCropsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedCropsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedCropsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedCropsData& from) {
    SerializedCropsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedCropsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "editor_serialization.SerializedCropsData";
  }
  protected:
  explicit SerializedCropsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .editor_serialization.CropsData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::editor_serialization::CropsData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::editor_serialization::CropsData >*
      mutable_data();
  private:
  const ::editor_serialization::CropsData& _internal_data(int index) const;
  ::editor_serialization::CropsData* _internal_add_data();
  public:
  const ::editor_serialization::CropsData& data(int index) const;
  ::editor_serialization::CropsData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::editor_serialization::CropsData >&
      data() const;

  // @@protoc_insertion_point(class_scope:editor_serialization.SerializedCropsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::editor_serialization::CropsData > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_editor_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// region

// float x = 1;
inline void region::clear_x() {
  _impl_.x_ = 0;
}
inline float region::_internal_x() const {
  return _impl_.x_;
}
inline float region::x() const {
  // @@protoc_insertion_point(field_get:editor_serialization.region.x)
  return _internal_x();
}
inline void region::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void region::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:editor_serialization.region.x)
}

// float y = 2;
inline void region::clear_y() {
  _impl_.y_ = 0;
}
inline float region::_internal_y() const {
  return _impl_.y_;
}
inline float region::y() const {
  // @@protoc_insertion_point(field_get:editor_serialization.region.y)
  return _internal_y();
}
inline void region::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void region::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:editor_serialization.region.y)
}

// float w = 3;
inline void region::clear_w() {
  _impl_.w_ = 0;
}
inline float region::_internal_w() const {
  return _impl_.w_;
}
inline float region::w() const {
  // @@protoc_insertion_point(field_get:editor_serialization.region.w)
  return _internal_w();
}
inline void region::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void region::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:editor_serialization.region.w)
}

// float h = 4;
inline void region::clear_h() {
  _impl_.h_ = 0;
}
inline float region::_internal_h() const {
  return _impl_.h_;
}
inline float region::h() const {
  // @@protoc_insertion_point(field_get:editor_serialization.region.h)
  return _internal_h();
}
inline void region::_internal_set_h(float value) {
  
  _impl_.h_ = value;
}
inline void region::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:editor_serialization.region.h)
}

// -------------------------------------------------------------------

// CropsData

// string crop_name = 1;
inline void CropsData::clear_crop_name() {
  _impl_.crop_name_.ClearToEmpty();
}
inline const std::string& CropsData::crop_name() const {
  // @@protoc_insertion_point(field_get:editor_serialization.CropsData.crop_name)
  return _internal_crop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CropsData::set_crop_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.crop_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:editor_serialization.CropsData.crop_name)
}
inline std::string* CropsData::mutable_crop_name() {
  std::string* _s = _internal_mutable_crop_name();
  // @@protoc_insertion_point(field_mutable:editor_serialization.CropsData.crop_name)
  return _s;
}
inline const std::string& CropsData::_internal_crop_name() const {
  return _impl_.crop_name_.Get();
}
inline void CropsData::_internal_set_crop_name(const std::string& value) {
  
  _impl_.crop_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CropsData::_internal_mutable_crop_name() {
  
  return _impl_.crop_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CropsData::release_crop_name() {
  // @@protoc_insertion_point(field_release:editor_serialization.CropsData.crop_name)
  return _impl_.crop_name_.Release();
}
inline void CropsData::set_allocated_crop_name(std::string* crop_name) {
  if (crop_name != nullptr) {
    
  } else {
    
  }
  _impl_.crop_name_.SetAllocated(crop_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crop_name_.IsDefault()) {
    _impl_.crop_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:editor_serialization.CropsData.crop_name)
}

// .editor_serialization.region crop = 2;
inline bool CropsData::_internal_has_crop() const {
  return this != internal_default_instance() && _impl_.crop_ != nullptr;
}
inline bool CropsData::has_crop() const {
  return _internal_has_crop();
}
inline void CropsData::clear_crop() {
  if (GetArenaForAllocation() == nullptr && _impl_.crop_ != nullptr) {
    delete _impl_.crop_;
  }
  _impl_.crop_ = nullptr;
}
inline const ::editor_serialization::region& CropsData::_internal_crop() const {
  const ::editor_serialization::region* p = _impl_.crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::editor_serialization::region&>(
      ::editor_serialization::_region_default_instance_);
}
inline const ::editor_serialization::region& CropsData::crop() const {
  // @@protoc_insertion_point(field_get:editor_serialization.CropsData.crop)
  return _internal_crop();
}
inline void CropsData::unsafe_arena_set_allocated_crop(
    ::editor_serialization::region* crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_);
  }
  _impl_.crop_ = crop;
  if (crop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:editor_serialization.CropsData.crop)
}
inline ::editor_serialization::region* CropsData::release_crop() {
  
  ::editor_serialization::region* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::editor_serialization::region* CropsData::unsafe_arena_release_crop() {
  // @@protoc_insertion_point(field_release:editor_serialization.CropsData.crop)
  
  ::editor_serialization::region* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
  return temp;
}
inline ::editor_serialization::region* CropsData::_internal_mutable_crop() {
  
  if (_impl_.crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::editor_serialization::region>(GetArenaForAllocation());
    _impl_.crop_ = p;
  }
  return _impl_.crop_;
}
inline ::editor_serialization::region* CropsData::mutable_crop() {
  ::editor_serialization::region* _msg = _internal_mutable_crop();
  // @@protoc_insertion_point(field_mutable:editor_serialization.CropsData.crop)
  return _msg;
}
inline void CropsData::set_allocated_crop(::editor_serialization::region* crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.crop_;
  }
  if (crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crop);
    if (message_arena != submessage_arena) {
      crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.crop_ = crop;
  // @@protoc_insertion_point(field_set_allocated:editor_serialization.CropsData.crop)
}

// -------------------------------------------------------------------

// SerializedCropsData

// repeated .editor_serialization.CropsData data = 1;
inline int SerializedCropsData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int SerializedCropsData::data_size() const {
  return _internal_data_size();
}
inline void SerializedCropsData::clear_data() {
  _impl_.data_.Clear();
}
inline ::editor_serialization::CropsData* SerializedCropsData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:editor_serialization.SerializedCropsData.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::editor_serialization::CropsData >*
SerializedCropsData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:editor_serialization.SerializedCropsData.data)
  return &_impl_.data_;
}
inline const ::editor_serialization::CropsData& SerializedCropsData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::editor_serialization::CropsData& SerializedCropsData::data(int index) const {
  // @@protoc_insertion_point(field_get:editor_serialization.SerializedCropsData.data)
  return _internal_data(index);
}
inline ::editor_serialization::CropsData* SerializedCropsData::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::editor_serialization::CropsData* SerializedCropsData::add_data() {
  ::editor_serialization::CropsData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:editor_serialization.SerializedCropsData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::editor_serialization::CropsData >&
SerializedCropsData::data() const {
  // @@protoc_insertion_point(field_list:editor_serialization.SerializedCropsData.data)
  return _impl_.data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace editor_serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_editor_5fdata_2eproto
