// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IndieGoUI.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IndieGoUI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IndieGoUI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IndieGoUI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IndieGoUI_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IndieGoUI_2eproto;
namespace ui_serialization {
class Element;
struct ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Font;
struct FontDefaultTypeInternal;
extern FontDefaultTypeInternal _Font_default_instance_;
class LayoutRow;
struct LayoutRowDefaultTypeInternal;
extern LayoutRowDefaultTypeInternal _LayoutRow_default_instance_;
class SerializedUI;
struct SerializedUIDefaultTypeInternal;
extern SerializedUIDefaultTypeInternal _SerializedUI_default_instance_;
class SkinImage;
struct SkinImageDefaultTypeInternal;
extern SkinImageDefaultTypeInternal _SkinImage_default_instance_;
class SkinnedProperty;
struct SkinnedPropertyDefaultTypeInternal;
extern SkinnedPropertyDefaultTypeInternal _SkinnedProperty_default_instance_;
class StyleColor;
struct StyleColorDefaultTypeInternal;
extern StyleColorDefaultTypeInternal _StyleColor_default_instance_;
class Widget;
struct WidgetDefaultTypeInternal;
extern WidgetDefaultTypeInternal _Widget_default_instance_;
class WidgetBase;
struct WidgetBaseDefaultTypeInternal;
extern WidgetBaseDefaultTypeInternal _WidgetBase_default_instance_;
class region;
struct regionDefaultTypeInternal;
extern regionDefaultTypeInternal _region_default_instance_;
class region_size;
struct region_sizeDefaultTypeInternal;
extern region_sizeDefaultTypeInternal _region_size_default_instance_;
}  // namespace ui_serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::ui_serialization::Element* Arena::CreateMaybeMessage<::ui_serialization::Element>(Arena*);
template<> ::ui_serialization::Font* Arena::CreateMaybeMessage<::ui_serialization::Font>(Arena*);
template<> ::ui_serialization::LayoutRow* Arena::CreateMaybeMessage<::ui_serialization::LayoutRow>(Arena*);
template<> ::ui_serialization::SerializedUI* Arena::CreateMaybeMessage<::ui_serialization::SerializedUI>(Arena*);
template<> ::ui_serialization::SkinImage* Arena::CreateMaybeMessage<::ui_serialization::SkinImage>(Arena*);
template<> ::ui_serialization::SkinnedProperty* Arena::CreateMaybeMessage<::ui_serialization::SkinnedProperty>(Arena*);
template<> ::ui_serialization::StyleColor* Arena::CreateMaybeMessage<::ui_serialization::StyleColor>(Arena*);
template<> ::ui_serialization::Widget* Arena::CreateMaybeMessage<::ui_serialization::Widget>(Arena*);
template<> ::ui_serialization::WidgetBase* Arena::CreateMaybeMessage<::ui_serialization::WidgetBase>(Arena*);
template<> ::ui_serialization::region* Arena::CreateMaybeMessage<::ui_serialization::region>(Arena*);
template<> ::ui_serialization::region_size* Arena::CreateMaybeMessage<::ui_serialization::region_size>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ui_serialization {

// ===================================================================

class region final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.region) */ {
 public:
  inline region() : region(nullptr) {}
  ~region() override;
  explicit PROTOBUF_CONSTEXPR region(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  region(const region& from);
  region(region&& from) noexcept
    : region() {
    *this = ::std::move(from);
  }

  inline region& operator=(const region& from) {
    CopyFrom(from);
    return *this;
  }
  inline region& operator=(region&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const region& default_instance() {
    return *internal_default_instance();
  }
  static inline const region* internal_default_instance() {
    return reinterpret_cast<const region*>(
               &_region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(region& a, region& b) {
    a.Swap(&b);
  }
  inline void Swap(region* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<region>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const region& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const region& from) {
    region::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(region* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.region";
  }
  protected:
  explicit region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 4;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float w_;
    float h_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class region_size final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.region_size) */ {
 public:
  inline region_size() : region_size(nullptr) {}
  ~region_size() override;
  explicit PROTOBUF_CONSTEXPR region_size(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  region_size(const region_size& from);
  region_size(region_size&& from) noexcept
    : region_size() {
    *this = ::std::move(from);
  }

  inline region_size& operator=(const region_size& from) {
    CopyFrom(from);
    return *this;
  }
  inline region_size& operator=(region_size&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const region_size& default_instance() {
    return *internal_default_instance();
  }
  static inline const region_size* internal_default_instance() {
    return reinterpret_cast<const region_size*>(
               &_region_size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(region_size& a, region_size& b) {
    a.Swap(&b);
  }
  inline void Swap(region_size* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(region_size* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  region_size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<region_size>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const region_size& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const region_size& from) {
    region_size::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(region_size* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.region_size";
  }
  protected:
  explicit region_size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.region_size)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class StyleColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.StyleColor) */ {
 public:
  inline StyleColor() : StyleColor(nullptr) {}
  ~StyleColor() override;
  explicit PROTOBUF_CONSTEXPR StyleColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleColor(const StyleColor& from);
  StyleColor(StyleColor&& from) noexcept
    : StyleColor() {
    *this = ::std::move(from);
  }

  inline StyleColor& operator=(const StyleColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleColor& operator=(StyleColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleColor* internal_default_instance() {
    return reinterpret_cast<const StyleColor*>(
               &_StyleColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StyleColor& a, StyleColor& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StyleColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StyleColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StyleColor& from) {
    StyleColor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.StyleColor";
  }
  protected:
  explicit StyleColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.StyleColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float r_;
    float g_;
    float b_;
    float a_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class SkinImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.SkinImage) */ {
 public:
  inline SkinImage() : SkinImage(nullptr) {}
  ~SkinImage() override;
  explicit PROTOBUF_CONSTEXPR SkinImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkinImage(const SkinImage& from);
  SkinImage(SkinImage&& from) noexcept
    : SkinImage() {
    *this = ::std::move(from);
  }

  inline SkinImage& operator=(const SkinImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkinImage& operator=(SkinImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkinImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkinImage* internal_default_instance() {
    return reinterpret_cast<const SkinImage*>(
               &_SkinImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SkinImage& a, SkinImage& b) {
    a.Swap(&b);
  }
  inline void Swap(SkinImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkinImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkinImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkinImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkinImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkinImage& from) {
    SkinImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkinImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.SkinImage";
  }
  protected:
  explicit SkinImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kCropFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .ui_serialization.region crop = 2;
  bool has_crop() const;
  private:
  bool _internal_has_crop() const;
  public:
  void clear_crop();
  const ::ui_serialization::region& crop() const;
  PROTOBUF_NODISCARD ::ui_serialization::region* release_crop();
  ::ui_serialization::region* mutable_crop();
  void set_allocated_crop(::ui_serialization::region* crop);
  private:
  const ::ui_serialization::region& _internal_crop() const;
  ::ui_serialization::region* _internal_mutable_crop();
  public:
  void unsafe_arena_set_allocated_crop(
      ::ui_serialization::region* crop);
  ::ui_serialization::region* unsafe_arena_release_crop();

  // @@protoc_insertion_point(class_scope:ui_serialization.SkinImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::ui_serialization::region* crop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class Font final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.Font) */ {
 public:
  inline Font() : Font(nullptr) {}
  ~Font() override;
  explicit PROTOBUF_CONSTEXPR Font(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Font(const Font& from);
  Font(Font&& from) noexcept
    : Font() {
    *this = ::std::move(from);
  }

  inline Font& operator=(const Font& from) {
    CopyFrom(from);
    return *this;
  }
  inline Font& operator=(Font&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Font& default_instance() {
    return *internal_default_instance();
  }
  static inline const Font* internal_default_instance() {
    return reinterpret_cast<const Font*>(
               &_Font_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Font& a, Font& b) {
    a.Swap(&b);
  }
  inline void Swap(Font* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Font* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Font* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Font>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Font& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Font& from) {
    Font::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Font* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.Font";
  }
  protected:
  explicit Font(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float size = 2;
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.Font)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    float size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class SkinnedProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.SkinnedProperty) */ {
 public:
  inline SkinnedProperty() : SkinnedProperty(nullptr) {}
  ~SkinnedProperty() override;
  explicit PROTOBUF_CONSTEXPR SkinnedProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkinnedProperty(const SkinnedProperty& from);
  SkinnedProperty(SkinnedProperty&& from) noexcept
    : SkinnedProperty() {
    *this = ::std::move(from);
  }

  inline SkinnedProperty& operator=(const SkinnedProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkinnedProperty& operator=(SkinnedProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkinnedProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkinnedProperty* internal_default_instance() {
    return reinterpret_cast<const SkinnedProperty*>(
               &_SkinnedProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SkinnedProperty& a, SkinnedProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(SkinnedProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkinnedProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkinnedProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkinnedProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkinnedProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkinnedProperty& from) {
    SkinnedProperty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkinnedProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.SkinnedProperty";
  }
  protected:
  explicit SkinnedProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
    kPropTypeFieldNumber = 2,
  };
  // .ui_serialization.SkinImage img = 1;
  bool has_img() const;
  private:
  bool _internal_has_img() const;
  public:
  void clear_img();
  const ::ui_serialization::SkinImage& img() const;
  PROTOBUF_NODISCARD ::ui_serialization::SkinImage* release_img();
  ::ui_serialization::SkinImage* mutable_img();
  void set_allocated_img(::ui_serialization::SkinImage* img);
  private:
  const ::ui_serialization::SkinImage& _internal_img() const;
  ::ui_serialization::SkinImage* _internal_mutable_img();
  public:
  void unsafe_arena_set_allocated_img(
      ::ui_serialization::SkinImage* img);
  ::ui_serialization::SkinImage* unsafe_arena_release_img();

  // uint32 prop_type = 2;
  void clear_prop_type();
  uint32_t prop_type() const;
  void set_prop_type(uint32_t value);
  private:
  uint32_t _internal_prop_type() const;
  void _internal_set_prop_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.SkinnedProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ui_serialization::SkinImage* img_;
    uint32_t prop_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class LayoutRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.LayoutRow) */ {
 public:
  inline LayoutRow() : LayoutRow(nullptr) {}
  ~LayoutRow() override;
  explicit PROTOBUF_CONSTEXPR LayoutRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutRow(const LayoutRow& from);
  LayoutRow(LayoutRow&& from) noexcept
    : LayoutRow() {
    *this = ::std::move(from);
  }

  inline LayoutRow& operator=(const LayoutRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutRow& operator=(LayoutRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutRow* internal_default_instance() {
    return reinterpret_cast<const LayoutRow*>(
               &_LayoutRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LayoutRow& a, LayoutRow& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LayoutRow& from) {
    LayoutRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.LayoutRow";
  }
  protected:
  explicit LayoutRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColsWidthsFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // repeated float cols_widths = 2;
  int cols_widths_size() const;
  private:
  int _internal_cols_widths_size() const;
  public:
  void clear_cols_widths();
  private:
  float _internal_cols_widths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cols_widths() const;
  void _internal_add_cols_widths(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cols_widths();
  public:
  float cols_widths(int index) const;
  void set_cols_widths(int index, float value);
  void add_cols_widths(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cols_widths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cols_widths();

  // float height = 1;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.LayoutRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cols_widths_;
    float height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class WidgetBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.WidgetBase) */ {
 public:
  inline WidgetBase() : WidgetBase(nullptr) {}
  ~WidgetBase() override;
  explicit PROTOBUF_CONSTEXPR WidgetBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WidgetBase(const WidgetBase& from);
  WidgetBase(WidgetBase&& from) noexcept
    : WidgetBase() {
    *this = ::std::move(from);
  }

  inline WidgetBase& operator=(const WidgetBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidgetBase& operator=(WidgetBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidgetBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidgetBase* internal_default_instance() {
    return reinterpret_cast<const WidgetBase*>(
               &_WidgetBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WidgetBase& a, WidgetBase& b) {
    a.Swap(&b);
  }
  inline void Swap(WidgetBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidgetBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WidgetBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WidgetBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WidgetBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WidgetBase& from) {
    WidgetBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WidgetBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.WidgetBase";
  }
  protected:
  explicit WidgetBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 12,
    kSkinnedPropsFieldNumber = 13,
    kStyledPropsFieldNumber = 14,
    kNameFieldNumber = 1,
    kSizeLocFieldNumber = 2,
    kFontFieldNumber = 8,
    kPaddingFieldNumber = 10,
    kSpacingFieldNumber = 11,
    kBorderedFieldNumber = 3,
    kTitledFieldNumber = 4,
    kMinimizableFieldNumber = 5,
    kScalableFieldNumber = 6,
    kMovableFieldNumber = 7,
    kBorderSizeFieldNumber = 9,
  };
  // repeated .ui_serialization.LayoutRow rows = 12;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::ui_serialization::LayoutRow* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::LayoutRow >*
      mutable_rows();
  private:
  const ::ui_serialization::LayoutRow& _internal_rows(int index) const;
  ::ui_serialization::LayoutRow* _internal_add_rows();
  public:
  const ::ui_serialization::LayoutRow& rows(int index) const;
  ::ui_serialization::LayoutRow* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::LayoutRow >&
      rows() const;

  // repeated .ui_serialization.SkinnedProperty skinned_props = 13;
  int skinned_props_size() const;
  private:
  int _internal_skinned_props_size() const;
  public:
  void clear_skinned_props();
  ::ui_serialization::SkinnedProperty* mutable_skinned_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >*
      mutable_skinned_props();
  private:
  const ::ui_serialization::SkinnedProperty& _internal_skinned_props(int index) const;
  ::ui_serialization::SkinnedProperty* _internal_add_skinned_props();
  public:
  const ::ui_serialization::SkinnedProperty& skinned_props(int index) const;
  ::ui_serialization::SkinnedProperty* add_skinned_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >&
      skinned_props() const;

  // repeated .ui_serialization.StyleColor styled_props = 14;
  int styled_props_size() const;
  private:
  int _internal_styled_props_size() const;
  public:
  void clear_styled_props();
  ::ui_serialization::StyleColor* mutable_styled_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >*
      mutable_styled_props();
  private:
  const ::ui_serialization::StyleColor& _internal_styled_props(int index) const;
  ::ui_serialization::StyleColor* _internal_add_styled_props();
  public:
  const ::ui_serialization::StyleColor& styled_props(int index) const;
  ::ui_serialization::StyleColor* add_styled_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >&
      styled_props() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ui_serialization.region size_loc = 2;
  bool has_size_loc() const;
  private:
  bool _internal_has_size_loc() const;
  public:
  void clear_size_loc();
  const ::ui_serialization::region& size_loc() const;
  PROTOBUF_NODISCARD ::ui_serialization::region* release_size_loc();
  ::ui_serialization::region* mutable_size_loc();
  void set_allocated_size_loc(::ui_serialization::region* size_loc);
  private:
  const ::ui_serialization::region& _internal_size_loc() const;
  ::ui_serialization::region* _internal_mutable_size_loc();
  public:
  void unsafe_arena_set_allocated_size_loc(
      ::ui_serialization::region* size_loc);
  ::ui_serialization::region* unsafe_arena_release_size_loc();

  // .ui_serialization.Font font = 8;
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  const ::ui_serialization::Font& font() const;
  PROTOBUF_NODISCARD ::ui_serialization::Font* release_font();
  ::ui_serialization::Font* mutable_font();
  void set_allocated_font(::ui_serialization::Font* font);
  private:
  const ::ui_serialization::Font& _internal_font() const;
  ::ui_serialization::Font* _internal_mutable_font();
  public:
  void unsafe_arena_set_allocated_font(
      ::ui_serialization::Font* font);
  ::ui_serialization::Font* unsafe_arena_release_font();

  // .ui_serialization.region_size padding = 10;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const ::ui_serialization::region_size& padding() const;
  PROTOBUF_NODISCARD ::ui_serialization::region_size* release_padding();
  ::ui_serialization::region_size* mutable_padding();
  void set_allocated_padding(::ui_serialization::region_size* padding);
  private:
  const ::ui_serialization::region_size& _internal_padding() const;
  ::ui_serialization::region_size* _internal_mutable_padding();
  public:
  void unsafe_arena_set_allocated_padding(
      ::ui_serialization::region_size* padding);
  ::ui_serialization::region_size* unsafe_arena_release_padding();

  // .ui_serialization.region_size spacing = 11;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::ui_serialization::region_size& spacing() const;
  PROTOBUF_NODISCARD ::ui_serialization::region_size* release_spacing();
  ::ui_serialization::region_size* mutable_spacing();
  void set_allocated_spacing(::ui_serialization::region_size* spacing);
  private:
  const ::ui_serialization::region_size& _internal_spacing() const;
  ::ui_serialization::region_size* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::ui_serialization::region_size* spacing);
  ::ui_serialization::region_size* unsafe_arena_release_spacing();

  // bool bordered = 3;
  void clear_bordered();
  bool bordered() const;
  void set_bordered(bool value);
  private:
  bool _internal_bordered() const;
  void _internal_set_bordered(bool value);
  public:

  // bool titled = 4;
  void clear_titled();
  bool titled() const;
  void set_titled(bool value);
  private:
  bool _internal_titled() const;
  void _internal_set_titled(bool value);
  public:

  // bool minimizable = 5;
  void clear_minimizable();
  bool minimizable() const;
  void set_minimizable(bool value);
  private:
  bool _internal_minimizable() const;
  void _internal_set_minimizable(bool value);
  public:

  // bool scalable = 6;
  void clear_scalable();
  bool scalable() const;
  void set_scalable(bool value);
  private:
  bool _internal_scalable() const;
  void _internal_set_scalable(bool value);
  public:

  // bool movable = 7;
  void clear_movable();
  bool movable() const;
  void set_movable(bool value);
  private:
  bool _internal_movable() const;
  void _internal_set_movable(bool value);
  public:

  // float border_size = 9;
  void clear_border_size();
  float border_size() const;
  void set_border_size(float value);
  private:
  float _internal_border_size() const;
  void _internal_set_border_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.WidgetBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::LayoutRow > rows_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty > skinned_props_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor > styled_props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::ui_serialization::region* size_loc_;
    ::ui_serialization::Font* font_;
    ::ui_serialization::region_size* padding_;
    ::ui_serialization::region_size* spacing_;
    bool bordered_;
    bool titled_;
    bool minimizable_;
    bool scalable_;
    bool movable_;
    float border_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.Element) */ {
 public:
  inline Element() : Element(nullptr) {}
  ~Element() override;
  explicit PROTOBUF_CONSTEXPR Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Element& from) {
    Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.Element";
  }
  protected:
  explicit Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkinnedPropsFieldNumber = 9,
    kStyledPropsFieldNumber = 10,
    kNameFieldNumber = 1,
    kWidgetNameFieldNumber = 2,
    kLabelFieldNumber = 11,
    kFontFieldNumber = 5,
    kPaddingFieldNumber = 8,
    kTypeFieldNumber = 3,
    kEltPushOptFieldNumber = 4,
    kBorderFieldNumber = 6,
    kRoundingFieldNumber = 7,
    kTextAlignFieldNumber = 12,
    kWidthFieldNumber = 13,
    kHeightFieldNumber = 14,
  };
  // repeated .ui_serialization.SkinnedProperty skinned_props = 9;
  int skinned_props_size() const;
  private:
  int _internal_skinned_props_size() const;
  public:
  void clear_skinned_props();
  ::ui_serialization::SkinnedProperty* mutable_skinned_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >*
      mutable_skinned_props();
  private:
  const ::ui_serialization::SkinnedProperty& _internal_skinned_props(int index) const;
  ::ui_serialization::SkinnedProperty* _internal_add_skinned_props();
  public:
  const ::ui_serialization::SkinnedProperty& skinned_props(int index) const;
  ::ui_serialization::SkinnedProperty* add_skinned_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >&
      skinned_props() const;

  // repeated .ui_serialization.StyleColor styled_props = 10;
  int styled_props_size() const;
  private:
  int _internal_styled_props_size() const;
  public:
  void clear_styled_props();
  ::ui_serialization::StyleColor* mutable_styled_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >*
      mutable_styled_props();
  private:
  const ::ui_serialization::StyleColor& _internal_styled_props(int index) const;
  ::ui_serialization::StyleColor* _internal_add_styled_props();
  public:
  const ::ui_serialization::StyleColor& styled_props(int index) const;
  ::ui_serialization::StyleColor* add_styled_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >&
      styled_props() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string widget_name = 2;
  void clear_widget_name();
  const std::string& widget_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_widget_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_widget_name();
  PROTOBUF_NODISCARD std::string* release_widget_name();
  void set_allocated_widget_name(std::string* widget_name);
  private:
  const std::string& _internal_widget_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_widget_name(const std::string& value);
  std::string* _internal_mutable_widget_name();
  public:

  // string label = 11;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .ui_serialization.Font font = 5;
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  const ::ui_serialization::Font& font() const;
  PROTOBUF_NODISCARD ::ui_serialization::Font* release_font();
  ::ui_serialization::Font* mutable_font();
  void set_allocated_font(::ui_serialization::Font* font);
  private:
  const ::ui_serialization::Font& _internal_font() const;
  ::ui_serialization::Font* _internal_mutable_font();
  public:
  void unsafe_arena_set_allocated_font(
      ::ui_serialization::Font* font);
  ::ui_serialization::Font* unsafe_arena_release_font();

  // .ui_serialization.region_size padding = 8;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const ::ui_serialization::region_size& padding() const;
  PROTOBUF_NODISCARD ::ui_serialization::region_size* release_padding();
  ::ui_serialization::region_size* mutable_padding();
  void set_allocated_padding(::ui_serialization::region_size* padding);
  private:
  const ::ui_serialization::region_size& _internal_padding() const;
  ::ui_serialization::region_size* _internal_mutable_padding();
  public:
  void unsafe_arena_set_allocated_padding(
      ::ui_serialization::region_size* padding);
  ::ui_serialization::region_size* unsafe_arena_release_padding();

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 elt_push_opt = 4;
  void clear_elt_push_opt();
  uint32_t elt_push_opt() const;
  void set_elt_push_opt(uint32_t value);
  private:
  uint32_t _internal_elt_push_opt() const;
  void _internal_set_elt_push_opt(uint32_t value);
  public:

  // float border = 6;
  void clear_border();
  float border() const;
  void set_border(float value);
  private:
  float _internal_border() const;
  void _internal_set_border(float value);
  public:

  // float rounding = 7;
  void clear_rounding();
  float rounding() const;
  void set_rounding(float value);
  private:
  float _internal_rounding() const;
  void _internal_set_rounding(float value);
  public:

  // uint32 text_align = 12;
  void clear_text_align();
  uint32_t text_align() const;
  void set_text_align(uint32_t value);
  private:
  uint32_t _internal_text_align() const;
  void _internal_set_text_align(uint32_t value);
  public:

  // float width = 13;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 14;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:ui_serialization.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty > skinned_props_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor > styled_props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr widget_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::ui_serialization::Font* font_;
    ::ui_serialization::region_size* padding_;
    uint32_t type_;
    uint32_t elt_push_opt_;
    float border_;
    float rounding_;
    uint32_t text_align_;
    float width_;
    float height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class Widget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.Widget) */ {
 public:
  inline Widget() : Widget(nullptr) {}
  ~Widget() override;
  explicit PROTOBUF_CONSTEXPR Widget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Widget(const Widget& from);
  Widget(Widget&& from) noexcept
    : Widget() {
    *this = ::std::move(from);
  }

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline Widget& operator=(Widget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Widget& default_instance() {
    return *internal_default_instance();
  }
  static inline const Widget* internal_default_instance() {
    return reinterpret_cast<const Widget*>(
               &_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Widget& a, Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(Widget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Widget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Widget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Widget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Widget& from) {
    Widget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Widget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.Widget";
  }
  protected:
  explicit Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kWidgetFieldNumber = 1,
  };
  // repeated .ui_serialization.Element elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ui_serialization::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Element >*
      mutable_elements();
  private:
  const ::ui_serialization::Element& _internal_elements(int index) const;
  ::ui_serialization::Element* _internal_add_elements();
  public:
  const ::ui_serialization::Element& elements(int index) const;
  ::ui_serialization::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Element >&
      elements() const;

  // .ui_serialization.WidgetBase widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::ui_serialization::WidgetBase& widget() const;
  PROTOBUF_NODISCARD ::ui_serialization::WidgetBase* release_widget();
  ::ui_serialization::WidgetBase* mutable_widget();
  void set_allocated_widget(::ui_serialization::WidgetBase* widget);
  private:
  const ::ui_serialization::WidgetBase& _internal_widget() const;
  ::ui_serialization::WidgetBase* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::ui_serialization::WidgetBase* widget);
  ::ui_serialization::WidgetBase* unsafe_arena_release_widget();

  // @@protoc_insertion_point(class_scope:ui_serialization.Widget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Element > elements_;
    ::ui_serialization::WidgetBase* widget_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// -------------------------------------------------------------------

class SerializedUI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ui_serialization.SerializedUI) */ {
 public:
  inline SerializedUI() : SerializedUI(nullptr) {}
  ~SerializedUI() override;
  explicit PROTOBUF_CONSTEXPR SerializedUI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedUI(const SerializedUI& from);
  SerializedUI(SerializedUI&& from) noexcept
    : SerializedUI() {
    *this = ::std::move(from);
  }

  inline SerializedUI& operator=(const SerializedUI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedUI& operator=(SerializedUI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedUI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedUI* internal_default_instance() {
    return reinterpret_cast<const SerializedUI*>(
               &_SerializedUI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SerializedUI& a, SerializedUI& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedUI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedUI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedUI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedUI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedUI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedUI& from) {
    SerializedUI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedUI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ui_serialization.SerializedUI";
  }
  protected:
  explicit SerializedUI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontsFieldNumber = 1,
    kWidgetsFieldNumber = 2,
  };
  // repeated .ui_serialization.Font fonts = 1;
  int fonts_size() const;
  private:
  int _internal_fonts_size() const;
  public:
  void clear_fonts();
  ::ui_serialization::Font* mutable_fonts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Font >*
      mutable_fonts();
  private:
  const ::ui_serialization::Font& _internal_fonts(int index) const;
  ::ui_serialization::Font* _internal_add_fonts();
  public:
  const ::ui_serialization::Font& fonts(int index) const;
  ::ui_serialization::Font* add_fonts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Font >&
      fonts() const;

  // repeated .ui_serialization.Widget widgets = 2;
  int widgets_size() const;
  private:
  int _internal_widgets_size() const;
  public:
  void clear_widgets();
  ::ui_serialization::Widget* mutable_widgets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Widget >*
      mutable_widgets();
  private:
  const ::ui_serialization::Widget& _internal_widgets(int index) const;
  ::ui_serialization::Widget* _internal_add_widgets();
  public:
  const ::ui_serialization::Widget& widgets(int index) const;
  ::ui_serialization::Widget* add_widgets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Widget >&
      widgets() const;

  // @@protoc_insertion_point(class_scope:ui_serialization.SerializedUI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Font > fonts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Widget > widgets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IndieGoUI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// region

// float x = 1;
inline void region::clear_x() {
  _impl_.x_ = 0;
}
inline float region::_internal_x() const {
  return _impl_.x_;
}
inline float region::x() const {
  // @@protoc_insertion_point(field_get:ui_serialization.region.x)
  return _internal_x();
}
inline void region::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void region::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ui_serialization.region.x)
}

// float y = 2;
inline void region::clear_y() {
  _impl_.y_ = 0;
}
inline float region::_internal_y() const {
  return _impl_.y_;
}
inline float region::y() const {
  // @@protoc_insertion_point(field_get:ui_serialization.region.y)
  return _internal_y();
}
inline void region::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void region::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ui_serialization.region.y)
}

// float w = 3;
inline void region::clear_w() {
  _impl_.w_ = 0;
}
inline float region::_internal_w() const {
  return _impl_.w_;
}
inline float region::w() const {
  // @@protoc_insertion_point(field_get:ui_serialization.region.w)
  return _internal_w();
}
inline void region::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void region::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:ui_serialization.region.w)
}

// float h = 4;
inline void region::clear_h() {
  _impl_.h_ = 0;
}
inline float region::_internal_h() const {
  return _impl_.h_;
}
inline float region::h() const {
  // @@protoc_insertion_point(field_get:ui_serialization.region.h)
  return _internal_h();
}
inline void region::_internal_set_h(float value) {
  
  _impl_.h_ = value;
}
inline void region::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:ui_serialization.region.h)
}

// -------------------------------------------------------------------

// region_size

// float x = 1;
inline void region_size::clear_x() {
  _impl_.x_ = 0;
}
inline float region_size::_internal_x() const {
  return _impl_.x_;
}
inline float region_size::x() const {
  // @@protoc_insertion_point(field_get:ui_serialization.region_size.x)
  return _internal_x();
}
inline void region_size::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void region_size::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ui_serialization.region_size.x)
}

// float y = 2;
inline void region_size::clear_y() {
  _impl_.y_ = 0;
}
inline float region_size::_internal_y() const {
  return _impl_.y_;
}
inline float region_size::y() const {
  // @@protoc_insertion_point(field_get:ui_serialization.region_size.y)
  return _internal_y();
}
inline void region_size::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void region_size::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ui_serialization.region_size.y)
}

// -------------------------------------------------------------------

// StyleColor

// float r = 1;
inline void StyleColor::clear_r() {
  _impl_.r_ = 0;
}
inline float StyleColor::_internal_r() const {
  return _impl_.r_;
}
inline float StyleColor::r() const {
  // @@protoc_insertion_point(field_get:ui_serialization.StyleColor.r)
  return _internal_r();
}
inline void StyleColor::_internal_set_r(float value) {
  
  _impl_.r_ = value;
}
inline void StyleColor::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:ui_serialization.StyleColor.r)
}

// float g = 2;
inline void StyleColor::clear_g() {
  _impl_.g_ = 0;
}
inline float StyleColor::_internal_g() const {
  return _impl_.g_;
}
inline float StyleColor::g() const {
  // @@protoc_insertion_point(field_get:ui_serialization.StyleColor.g)
  return _internal_g();
}
inline void StyleColor::_internal_set_g(float value) {
  
  _impl_.g_ = value;
}
inline void StyleColor::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:ui_serialization.StyleColor.g)
}

// float b = 3;
inline void StyleColor::clear_b() {
  _impl_.b_ = 0;
}
inline float StyleColor::_internal_b() const {
  return _impl_.b_;
}
inline float StyleColor::b() const {
  // @@protoc_insertion_point(field_get:ui_serialization.StyleColor.b)
  return _internal_b();
}
inline void StyleColor::_internal_set_b(float value) {
  
  _impl_.b_ = value;
}
inline void StyleColor::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:ui_serialization.StyleColor.b)
}

// float a = 4;
inline void StyleColor::clear_a() {
  _impl_.a_ = 0;
}
inline float StyleColor::_internal_a() const {
  return _impl_.a_;
}
inline float StyleColor::a() const {
  // @@protoc_insertion_point(field_get:ui_serialization.StyleColor.a)
  return _internal_a();
}
inline void StyleColor::_internal_set_a(float value) {
  
  _impl_.a_ = value;
}
inline void StyleColor::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:ui_serialization.StyleColor.a)
}

// -------------------------------------------------------------------

// SkinImage

// string path = 1;
inline void SkinImage::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& SkinImage::path() const {
  // @@protoc_insertion_point(field_get:ui_serialization.SkinImage.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkinImage::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ui_serialization.SkinImage.path)
}
inline std::string* SkinImage::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ui_serialization.SkinImage.path)
  return _s;
}
inline const std::string& SkinImage::_internal_path() const {
  return _impl_.path_.Get();
}
inline void SkinImage::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* SkinImage::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* SkinImage::release_path() {
  // @@protoc_insertion_point(field_release:ui_serialization.SkinImage.path)
  return _impl_.path_.Release();
}
inline void SkinImage::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.SkinImage.path)
}

// .ui_serialization.region crop = 2;
inline bool SkinImage::_internal_has_crop() const {
  return this != internal_default_instance() && _impl_.crop_ != nullptr;
}
inline bool SkinImage::has_crop() const {
  return _internal_has_crop();
}
inline void SkinImage::clear_crop() {
  if (GetArenaForAllocation() == nullptr && _impl_.crop_ != nullptr) {
    delete _impl_.crop_;
  }
  _impl_.crop_ = nullptr;
}
inline const ::ui_serialization::region& SkinImage::_internal_crop() const {
  const ::ui_serialization::region* p = _impl_.crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::region&>(
      ::ui_serialization::_region_default_instance_);
}
inline const ::ui_serialization::region& SkinImage::crop() const {
  // @@protoc_insertion_point(field_get:ui_serialization.SkinImage.crop)
  return _internal_crop();
}
inline void SkinImage::unsafe_arena_set_allocated_crop(
    ::ui_serialization::region* crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_);
  }
  _impl_.crop_ = crop;
  if (crop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.SkinImage.crop)
}
inline ::ui_serialization::region* SkinImage::release_crop() {
  
  ::ui_serialization::region* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::region* SkinImage::unsafe_arena_release_crop() {
  // @@protoc_insertion_point(field_release:ui_serialization.SkinImage.crop)
  
  ::ui_serialization::region* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
  return temp;
}
inline ::ui_serialization::region* SkinImage::_internal_mutable_crop() {
  
  if (_impl_.crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::region>(GetArenaForAllocation());
    _impl_.crop_ = p;
  }
  return _impl_.crop_;
}
inline ::ui_serialization::region* SkinImage::mutable_crop() {
  ::ui_serialization::region* _msg = _internal_mutable_crop();
  // @@protoc_insertion_point(field_mutable:ui_serialization.SkinImage.crop)
  return _msg;
}
inline void SkinImage::set_allocated_crop(::ui_serialization::region* crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.crop_;
  }
  if (crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crop);
    if (message_arena != submessage_arena) {
      crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.crop_ = crop;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.SkinImage.crop)
}

// -------------------------------------------------------------------

// Font

// string name = 1;
inline void Font::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Font::name() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Font.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Font::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ui_serialization.Font.name)
}
inline std::string* Font::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Font.name)
  return _s;
}
inline const std::string& Font::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Font::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Font::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Font::release_name() {
  // @@protoc_insertion_point(field_release:ui_serialization.Font.name)
  return _impl_.name_.Release();
}
inline void Font::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Font.name)
}

// float size = 2;
inline void Font::clear_size() {
  _impl_.size_ = 0;
}
inline float Font::_internal_size() const {
  return _impl_.size_;
}
inline float Font::size() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Font.size)
  return _internal_size();
}
inline void Font::_internal_set_size(float value) {
  
  _impl_.size_ = value;
}
inline void Font::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Font.size)
}

// -------------------------------------------------------------------

// SkinnedProperty

// .ui_serialization.SkinImage img = 1;
inline bool SkinnedProperty::_internal_has_img() const {
  return this != internal_default_instance() && _impl_.img_ != nullptr;
}
inline bool SkinnedProperty::has_img() const {
  return _internal_has_img();
}
inline void SkinnedProperty::clear_img() {
  if (GetArenaForAllocation() == nullptr && _impl_.img_ != nullptr) {
    delete _impl_.img_;
  }
  _impl_.img_ = nullptr;
}
inline const ::ui_serialization::SkinImage& SkinnedProperty::_internal_img() const {
  const ::ui_serialization::SkinImage* p = _impl_.img_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::SkinImage&>(
      ::ui_serialization::_SkinImage_default_instance_);
}
inline const ::ui_serialization::SkinImage& SkinnedProperty::img() const {
  // @@protoc_insertion_point(field_get:ui_serialization.SkinnedProperty.img)
  return _internal_img();
}
inline void SkinnedProperty::unsafe_arena_set_allocated_img(
    ::ui_serialization::SkinImage* img) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.img_);
  }
  _impl_.img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.SkinnedProperty.img)
}
inline ::ui_serialization::SkinImage* SkinnedProperty::release_img() {
  
  ::ui_serialization::SkinImage* temp = _impl_.img_;
  _impl_.img_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::SkinImage* SkinnedProperty::unsafe_arena_release_img() {
  // @@protoc_insertion_point(field_release:ui_serialization.SkinnedProperty.img)
  
  ::ui_serialization::SkinImage* temp = _impl_.img_;
  _impl_.img_ = nullptr;
  return temp;
}
inline ::ui_serialization::SkinImage* SkinnedProperty::_internal_mutable_img() {
  
  if (_impl_.img_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::SkinImage>(GetArenaForAllocation());
    _impl_.img_ = p;
  }
  return _impl_.img_;
}
inline ::ui_serialization::SkinImage* SkinnedProperty::mutable_img() {
  ::ui_serialization::SkinImage* _msg = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:ui_serialization.SkinnedProperty.img)
  return _msg;
}
inline void SkinnedProperty::set_allocated_img(::ui_serialization::SkinImage* img) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.img_;
  }
  if (img) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(img);
    if (message_arena != submessage_arena) {
      img = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.img_ = img;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.SkinnedProperty.img)
}

// uint32 prop_type = 2;
inline void SkinnedProperty::clear_prop_type() {
  _impl_.prop_type_ = 0u;
}
inline uint32_t SkinnedProperty::_internal_prop_type() const {
  return _impl_.prop_type_;
}
inline uint32_t SkinnedProperty::prop_type() const {
  // @@protoc_insertion_point(field_get:ui_serialization.SkinnedProperty.prop_type)
  return _internal_prop_type();
}
inline void SkinnedProperty::_internal_set_prop_type(uint32_t value) {
  
  _impl_.prop_type_ = value;
}
inline void SkinnedProperty::set_prop_type(uint32_t value) {
  _internal_set_prop_type(value);
  // @@protoc_insertion_point(field_set:ui_serialization.SkinnedProperty.prop_type)
}

// -------------------------------------------------------------------

// LayoutRow

// float height = 1;
inline void LayoutRow::clear_height() {
  _impl_.height_ = 0;
}
inline float LayoutRow::_internal_height() const {
  return _impl_.height_;
}
inline float LayoutRow::height() const {
  // @@protoc_insertion_point(field_get:ui_serialization.LayoutRow.height)
  return _internal_height();
}
inline void LayoutRow::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void LayoutRow::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ui_serialization.LayoutRow.height)
}

// repeated float cols_widths = 2;
inline int LayoutRow::_internal_cols_widths_size() const {
  return _impl_.cols_widths_.size();
}
inline int LayoutRow::cols_widths_size() const {
  return _internal_cols_widths_size();
}
inline void LayoutRow::clear_cols_widths() {
  _impl_.cols_widths_.Clear();
}
inline float LayoutRow::_internal_cols_widths(int index) const {
  return _impl_.cols_widths_.Get(index);
}
inline float LayoutRow::cols_widths(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.LayoutRow.cols_widths)
  return _internal_cols_widths(index);
}
inline void LayoutRow::set_cols_widths(int index, float value) {
  _impl_.cols_widths_.Set(index, value);
  // @@protoc_insertion_point(field_set:ui_serialization.LayoutRow.cols_widths)
}
inline void LayoutRow::_internal_add_cols_widths(float value) {
  _impl_.cols_widths_.Add(value);
}
inline void LayoutRow::add_cols_widths(float value) {
  _internal_add_cols_widths(value);
  // @@protoc_insertion_point(field_add:ui_serialization.LayoutRow.cols_widths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayoutRow::_internal_cols_widths() const {
  return _impl_.cols_widths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayoutRow::cols_widths() const {
  // @@protoc_insertion_point(field_list:ui_serialization.LayoutRow.cols_widths)
  return _internal_cols_widths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayoutRow::_internal_mutable_cols_widths() {
  return &_impl_.cols_widths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayoutRow::mutable_cols_widths() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.LayoutRow.cols_widths)
  return _internal_mutable_cols_widths();
}

// -------------------------------------------------------------------

// WidgetBase

// string name = 1;
inline void WidgetBase::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WidgetBase::name() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WidgetBase::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.name)
}
inline std::string* WidgetBase::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.name)
  return _s;
}
inline const std::string& WidgetBase::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WidgetBase::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WidgetBase::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* WidgetBase::release_name() {
  // @@protoc_insertion_point(field_release:ui_serialization.WidgetBase.name)
  return _impl_.name_.Release();
}
inline void WidgetBase::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.WidgetBase.name)
}

// .ui_serialization.region size_loc = 2;
inline bool WidgetBase::_internal_has_size_loc() const {
  return this != internal_default_instance() && _impl_.size_loc_ != nullptr;
}
inline bool WidgetBase::has_size_loc() const {
  return _internal_has_size_loc();
}
inline void WidgetBase::clear_size_loc() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_loc_ != nullptr) {
    delete _impl_.size_loc_;
  }
  _impl_.size_loc_ = nullptr;
}
inline const ::ui_serialization::region& WidgetBase::_internal_size_loc() const {
  const ::ui_serialization::region* p = _impl_.size_loc_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::region&>(
      ::ui_serialization::_region_default_instance_);
}
inline const ::ui_serialization::region& WidgetBase::size_loc() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.size_loc)
  return _internal_size_loc();
}
inline void WidgetBase::unsafe_arena_set_allocated_size_loc(
    ::ui_serialization::region* size_loc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_loc_);
  }
  _impl_.size_loc_ = size_loc;
  if (size_loc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.WidgetBase.size_loc)
}
inline ::ui_serialization::region* WidgetBase::release_size_loc() {
  
  ::ui_serialization::region* temp = _impl_.size_loc_;
  _impl_.size_loc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::region* WidgetBase::unsafe_arena_release_size_loc() {
  // @@protoc_insertion_point(field_release:ui_serialization.WidgetBase.size_loc)
  
  ::ui_serialization::region* temp = _impl_.size_loc_;
  _impl_.size_loc_ = nullptr;
  return temp;
}
inline ::ui_serialization::region* WidgetBase::_internal_mutable_size_loc() {
  
  if (_impl_.size_loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::region>(GetArenaForAllocation());
    _impl_.size_loc_ = p;
  }
  return _impl_.size_loc_;
}
inline ::ui_serialization::region* WidgetBase::mutable_size_loc() {
  ::ui_serialization::region* _msg = _internal_mutable_size_loc();
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.size_loc)
  return _msg;
}
inline void WidgetBase::set_allocated_size_loc(::ui_serialization::region* size_loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_loc_;
  }
  if (size_loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size_loc);
    if (message_arena != submessage_arena) {
      size_loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_loc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_loc_ = size_loc;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.WidgetBase.size_loc)
}

// bool bordered = 3;
inline void WidgetBase::clear_bordered() {
  _impl_.bordered_ = false;
}
inline bool WidgetBase::_internal_bordered() const {
  return _impl_.bordered_;
}
inline bool WidgetBase::bordered() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.bordered)
  return _internal_bordered();
}
inline void WidgetBase::_internal_set_bordered(bool value) {
  
  _impl_.bordered_ = value;
}
inline void WidgetBase::set_bordered(bool value) {
  _internal_set_bordered(value);
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.bordered)
}

// bool titled = 4;
inline void WidgetBase::clear_titled() {
  _impl_.titled_ = false;
}
inline bool WidgetBase::_internal_titled() const {
  return _impl_.titled_;
}
inline bool WidgetBase::titled() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.titled)
  return _internal_titled();
}
inline void WidgetBase::_internal_set_titled(bool value) {
  
  _impl_.titled_ = value;
}
inline void WidgetBase::set_titled(bool value) {
  _internal_set_titled(value);
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.titled)
}

// bool minimizable = 5;
inline void WidgetBase::clear_minimizable() {
  _impl_.minimizable_ = false;
}
inline bool WidgetBase::_internal_minimizable() const {
  return _impl_.minimizable_;
}
inline bool WidgetBase::minimizable() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.minimizable)
  return _internal_minimizable();
}
inline void WidgetBase::_internal_set_minimizable(bool value) {
  
  _impl_.minimizable_ = value;
}
inline void WidgetBase::set_minimizable(bool value) {
  _internal_set_minimizable(value);
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.minimizable)
}

// bool scalable = 6;
inline void WidgetBase::clear_scalable() {
  _impl_.scalable_ = false;
}
inline bool WidgetBase::_internal_scalable() const {
  return _impl_.scalable_;
}
inline bool WidgetBase::scalable() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.scalable)
  return _internal_scalable();
}
inline void WidgetBase::_internal_set_scalable(bool value) {
  
  _impl_.scalable_ = value;
}
inline void WidgetBase::set_scalable(bool value) {
  _internal_set_scalable(value);
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.scalable)
}

// bool movable = 7;
inline void WidgetBase::clear_movable() {
  _impl_.movable_ = false;
}
inline bool WidgetBase::_internal_movable() const {
  return _impl_.movable_;
}
inline bool WidgetBase::movable() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.movable)
  return _internal_movable();
}
inline void WidgetBase::_internal_set_movable(bool value) {
  
  _impl_.movable_ = value;
}
inline void WidgetBase::set_movable(bool value) {
  _internal_set_movable(value);
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.movable)
}

// .ui_serialization.Font font = 8;
inline bool WidgetBase::_internal_has_font() const {
  return this != internal_default_instance() && _impl_.font_ != nullptr;
}
inline bool WidgetBase::has_font() const {
  return _internal_has_font();
}
inline void WidgetBase::clear_font() {
  if (GetArenaForAllocation() == nullptr && _impl_.font_ != nullptr) {
    delete _impl_.font_;
  }
  _impl_.font_ = nullptr;
}
inline const ::ui_serialization::Font& WidgetBase::_internal_font() const {
  const ::ui_serialization::Font* p = _impl_.font_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::Font&>(
      ::ui_serialization::_Font_default_instance_);
}
inline const ::ui_serialization::Font& WidgetBase::font() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.font)
  return _internal_font();
}
inline void WidgetBase::unsafe_arena_set_allocated_font(
    ::ui_serialization::Font* font) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.font_);
  }
  _impl_.font_ = font;
  if (font) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.WidgetBase.font)
}
inline ::ui_serialization::Font* WidgetBase::release_font() {
  
  ::ui_serialization::Font* temp = _impl_.font_;
  _impl_.font_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::Font* WidgetBase::unsafe_arena_release_font() {
  // @@protoc_insertion_point(field_release:ui_serialization.WidgetBase.font)
  
  ::ui_serialization::Font* temp = _impl_.font_;
  _impl_.font_ = nullptr;
  return temp;
}
inline ::ui_serialization::Font* WidgetBase::_internal_mutable_font() {
  
  if (_impl_.font_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::Font>(GetArenaForAllocation());
    _impl_.font_ = p;
  }
  return _impl_.font_;
}
inline ::ui_serialization::Font* WidgetBase::mutable_font() {
  ::ui_serialization::Font* _msg = _internal_mutable_font();
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.font)
  return _msg;
}
inline void WidgetBase::set_allocated_font(::ui_serialization::Font* font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.font_;
  }
  if (font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(font);
    if (message_arena != submessage_arena) {
      font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.font_ = font;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.WidgetBase.font)
}

// float border_size = 9;
inline void WidgetBase::clear_border_size() {
  _impl_.border_size_ = 0;
}
inline float WidgetBase::_internal_border_size() const {
  return _impl_.border_size_;
}
inline float WidgetBase::border_size() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.border_size)
  return _internal_border_size();
}
inline void WidgetBase::_internal_set_border_size(float value) {
  
  _impl_.border_size_ = value;
}
inline void WidgetBase::set_border_size(float value) {
  _internal_set_border_size(value);
  // @@protoc_insertion_point(field_set:ui_serialization.WidgetBase.border_size)
}

// .ui_serialization.region_size padding = 10;
inline bool WidgetBase::_internal_has_padding() const {
  return this != internal_default_instance() && _impl_.padding_ != nullptr;
}
inline bool WidgetBase::has_padding() const {
  return _internal_has_padding();
}
inline void WidgetBase::clear_padding() {
  if (GetArenaForAllocation() == nullptr && _impl_.padding_ != nullptr) {
    delete _impl_.padding_;
  }
  _impl_.padding_ = nullptr;
}
inline const ::ui_serialization::region_size& WidgetBase::_internal_padding() const {
  const ::ui_serialization::region_size* p = _impl_.padding_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::region_size&>(
      ::ui_serialization::_region_size_default_instance_);
}
inline const ::ui_serialization::region_size& WidgetBase::padding() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.padding)
  return _internal_padding();
}
inline void WidgetBase::unsafe_arena_set_allocated_padding(
    ::ui_serialization::region_size* padding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.padding_);
  }
  _impl_.padding_ = padding;
  if (padding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.WidgetBase.padding)
}
inline ::ui_serialization::region_size* WidgetBase::release_padding() {
  
  ::ui_serialization::region_size* temp = _impl_.padding_;
  _impl_.padding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::region_size* WidgetBase::unsafe_arena_release_padding() {
  // @@protoc_insertion_point(field_release:ui_serialization.WidgetBase.padding)
  
  ::ui_serialization::region_size* temp = _impl_.padding_;
  _impl_.padding_ = nullptr;
  return temp;
}
inline ::ui_serialization::region_size* WidgetBase::_internal_mutable_padding() {
  
  if (_impl_.padding_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::region_size>(GetArenaForAllocation());
    _impl_.padding_ = p;
  }
  return _impl_.padding_;
}
inline ::ui_serialization::region_size* WidgetBase::mutable_padding() {
  ::ui_serialization::region_size* _msg = _internal_mutable_padding();
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.padding)
  return _msg;
}
inline void WidgetBase::set_allocated_padding(::ui_serialization::region_size* padding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.padding_;
  }
  if (padding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(padding);
    if (message_arena != submessage_arena) {
      padding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.padding_ = padding;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.WidgetBase.padding)
}

// .ui_serialization.region_size spacing = 11;
inline bool WidgetBase::_internal_has_spacing() const {
  return this != internal_default_instance() && _impl_.spacing_ != nullptr;
}
inline bool WidgetBase::has_spacing() const {
  return _internal_has_spacing();
}
inline void WidgetBase::clear_spacing() {
  if (GetArenaForAllocation() == nullptr && _impl_.spacing_ != nullptr) {
    delete _impl_.spacing_;
  }
  _impl_.spacing_ = nullptr;
}
inline const ::ui_serialization::region_size& WidgetBase::_internal_spacing() const {
  const ::ui_serialization::region_size* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::region_size&>(
      ::ui_serialization::_region_size_default_instance_);
}
inline const ::ui_serialization::region_size& WidgetBase::spacing() const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.spacing)
  return _internal_spacing();
}
inline void WidgetBase::unsafe_arena_set_allocated_spacing(
    ::ui_serialization::region_size* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.WidgetBase.spacing)
}
inline ::ui_serialization::region_size* WidgetBase::release_spacing() {
  
  ::ui_serialization::region_size* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::region_size* WidgetBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:ui_serialization.WidgetBase.spacing)
  
  ::ui_serialization::region_size* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::ui_serialization::region_size* WidgetBase::_internal_mutable_spacing() {
  
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::region_size>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::ui_serialization::region_size* WidgetBase::mutable_spacing() {
  ::ui_serialization::region_size* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.spacing)
  return _msg;
}
inline void WidgetBase::set_allocated_spacing(::ui_serialization::region_size* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spacing_;
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spacing);
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.WidgetBase.spacing)
}

// repeated .ui_serialization.LayoutRow rows = 12;
inline int WidgetBase::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int WidgetBase::rows_size() const {
  return _internal_rows_size();
}
inline void WidgetBase::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::ui_serialization::LayoutRow* WidgetBase::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::LayoutRow >*
WidgetBase::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.WidgetBase.rows)
  return &_impl_.rows_;
}
inline const ::ui_serialization::LayoutRow& WidgetBase::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::ui_serialization::LayoutRow& WidgetBase::rows(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.rows)
  return _internal_rows(index);
}
inline ::ui_serialization::LayoutRow* WidgetBase::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::ui_serialization::LayoutRow* WidgetBase::add_rows() {
  ::ui_serialization::LayoutRow* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:ui_serialization.WidgetBase.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::LayoutRow >&
WidgetBase::rows() const {
  // @@protoc_insertion_point(field_list:ui_serialization.WidgetBase.rows)
  return _impl_.rows_;
}

// repeated .ui_serialization.SkinnedProperty skinned_props = 13;
inline int WidgetBase::_internal_skinned_props_size() const {
  return _impl_.skinned_props_.size();
}
inline int WidgetBase::skinned_props_size() const {
  return _internal_skinned_props_size();
}
inline void WidgetBase::clear_skinned_props() {
  _impl_.skinned_props_.Clear();
}
inline ::ui_serialization::SkinnedProperty* WidgetBase::mutable_skinned_props(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.skinned_props)
  return _impl_.skinned_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >*
WidgetBase::mutable_skinned_props() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.WidgetBase.skinned_props)
  return &_impl_.skinned_props_;
}
inline const ::ui_serialization::SkinnedProperty& WidgetBase::_internal_skinned_props(int index) const {
  return _impl_.skinned_props_.Get(index);
}
inline const ::ui_serialization::SkinnedProperty& WidgetBase::skinned_props(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.skinned_props)
  return _internal_skinned_props(index);
}
inline ::ui_serialization::SkinnedProperty* WidgetBase::_internal_add_skinned_props() {
  return _impl_.skinned_props_.Add();
}
inline ::ui_serialization::SkinnedProperty* WidgetBase::add_skinned_props() {
  ::ui_serialization::SkinnedProperty* _add = _internal_add_skinned_props();
  // @@protoc_insertion_point(field_add:ui_serialization.WidgetBase.skinned_props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >&
WidgetBase::skinned_props() const {
  // @@protoc_insertion_point(field_list:ui_serialization.WidgetBase.skinned_props)
  return _impl_.skinned_props_;
}

// repeated .ui_serialization.StyleColor styled_props = 14;
inline int WidgetBase::_internal_styled_props_size() const {
  return _impl_.styled_props_.size();
}
inline int WidgetBase::styled_props_size() const {
  return _internal_styled_props_size();
}
inline void WidgetBase::clear_styled_props() {
  _impl_.styled_props_.Clear();
}
inline ::ui_serialization::StyleColor* WidgetBase::mutable_styled_props(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.WidgetBase.styled_props)
  return _impl_.styled_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >*
WidgetBase::mutable_styled_props() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.WidgetBase.styled_props)
  return &_impl_.styled_props_;
}
inline const ::ui_serialization::StyleColor& WidgetBase::_internal_styled_props(int index) const {
  return _impl_.styled_props_.Get(index);
}
inline const ::ui_serialization::StyleColor& WidgetBase::styled_props(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.WidgetBase.styled_props)
  return _internal_styled_props(index);
}
inline ::ui_serialization::StyleColor* WidgetBase::_internal_add_styled_props() {
  return _impl_.styled_props_.Add();
}
inline ::ui_serialization::StyleColor* WidgetBase::add_styled_props() {
  ::ui_serialization::StyleColor* _add = _internal_add_styled_props();
  // @@protoc_insertion_point(field_add:ui_serialization.WidgetBase.styled_props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >&
WidgetBase::styled_props() const {
  // @@protoc_insertion_point(field_list:ui_serialization.WidgetBase.styled_props)
  return _impl_.styled_props_;
}

// -------------------------------------------------------------------

// Element

// string name = 1;
inline void Element::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Element::name() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ui_serialization.Element.name)
}
inline std::string* Element::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.name)
  return _s;
}
inline const std::string& Element::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Element::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_name() {
  // @@protoc_insertion_point(field_release:ui_serialization.Element.name)
  return _impl_.name_.Release();
}
inline void Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Element.name)
}

// string widget_name = 2;
inline void Element::clear_widget_name() {
  _impl_.widget_name_.ClearToEmpty();
}
inline const std::string& Element::widget_name() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.widget_name)
  return _internal_widget_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_widget_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.widget_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ui_serialization.Element.widget_name)
}
inline std::string* Element::mutable_widget_name() {
  std::string* _s = _internal_mutable_widget_name();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.widget_name)
  return _s;
}
inline const std::string& Element::_internal_widget_name() const {
  return _impl_.widget_name_.Get();
}
inline void Element::_internal_set_widget_name(const std::string& value) {
  
  _impl_.widget_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_widget_name() {
  
  return _impl_.widget_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_widget_name() {
  // @@protoc_insertion_point(field_release:ui_serialization.Element.widget_name)
  return _impl_.widget_name_.Release();
}
inline void Element::set_allocated_widget_name(std::string* widget_name) {
  if (widget_name != nullptr) {
    
  } else {
    
  }
  _impl_.widget_name_.SetAllocated(widget_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.widget_name_.IsDefault()) {
    _impl_.widget_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Element.widget_name)
}

// uint32 type = 3;
inline void Element::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Element::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Element::type() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.type)
  return _internal_type();
}
inline void Element::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Element::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.type)
}

// uint32 elt_push_opt = 4;
inline void Element::clear_elt_push_opt() {
  _impl_.elt_push_opt_ = 0u;
}
inline uint32_t Element::_internal_elt_push_opt() const {
  return _impl_.elt_push_opt_;
}
inline uint32_t Element::elt_push_opt() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.elt_push_opt)
  return _internal_elt_push_opt();
}
inline void Element::_internal_set_elt_push_opt(uint32_t value) {
  
  _impl_.elt_push_opt_ = value;
}
inline void Element::set_elt_push_opt(uint32_t value) {
  _internal_set_elt_push_opt(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.elt_push_opt)
}

// .ui_serialization.Font font = 5;
inline bool Element::_internal_has_font() const {
  return this != internal_default_instance() && _impl_.font_ != nullptr;
}
inline bool Element::has_font() const {
  return _internal_has_font();
}
inline void Element::clear_font() {
  if (GetArenaForAllocation() == nullptr && _impl_.font_ != nullptr) {
    delete _impl_.font_;
  }
  _impl_.font_ = nullptr;
}
inline const ::ui_serialization::Font& Element::_internal_font() const {
  const ::ui_serialization::Font* p = _impl_.font_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::Font&>(
      ::ui_serialization::_Font_default_instance_);
}
inline const ::ui_serialization::Font& Element::font() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.font)
  return _internal_font();
}
inline void Element::unsafe_arena_set_allocated_font(
    ::ui_serialization::Font* font) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.font_);
  }
  _impl_.font_ = font;
  if (font) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.Element.font)
}
inline ::ui_serialization::Font* Element::release_font() {
  
  ::ui_serialization::Font* temp = _impl_.font_;
  _impl_.font_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::Font* Element::unsafe_arena_release_font() {
  // @@protoc_insertion_point(field_release:ui_serialization.Element.font)
  
  ::ui_serialization::Font* temp = _impl_.font_;
  _impl_.font_ = nullptr;
  return temp;
}
inline ::ui_serialization::Font* Element::_internal_mutable_font() {
  
  if (_impl_.font_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::Font>(GetArenaForAllocation());
    _impl_.font_ = p;
  }
  return _impl_.font_;
}
inline ::ui_serialization::Font* Element::mutable_font() {
  ::ui_serialization::Font* _msg = _internal_mutable_font();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.font)
  return _msg;
}
inline void Element::set_allocated_font(::ui_serialization::Font* font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.font_;
  }
  if (font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(font);
    if (message_arena != submessage_arena) {
      font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.font_ = font;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Element.font)
}

// float border = 6;
inline void Element::clear_border() {
  _impl_.border_ = 0;
}
inline float Element::_internal_border() const {
  return _impl_.border_;
}
inline float Element::border() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.border)
  return _internal_border();
}
inline void Element::_internal_set_border(float value) {
  
  _impl_.border_ = value;
}
inline void Element::set_border(float value) {
  _internal_set_border(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.border)
}

// float rounding = 7;
inline void Element::clear_rounding() {
  _impl_.rounding_ = 0;
}
inline float Element::_internal_rounding() const {
  return _impl_.rounding_;
}
inline float Element::rounding() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.rounding)
  return _internal_rounding();
}
inline void Element::_internal_set_rounding(float value) {
  
  _impl_.rounding_ = value;
}
inline void Element::set_rounding(float value) {
  _internal_set_rounding(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.rounding)
}

// .ui_serialization.region_size padding = 8;
inline bool Element::_internal_has_padding() const {
  return this != internal_default_instance() && _impl_.padding_ != nullptr;
}
inline bool Element::has_padding() const {
  return _internal_has_padding();
}
inline void Element::clear_padding() {
  if (GetArenaForAllocation() == nullptr && _impl_.padding_ != nullptr) {
    delete _impl_.padding_;
  }
  _impl_.padding_ = nullptr;
}
inline const ::ui_serialization::region_size& Element::_internal_padding() const {
  const ::ui_serialization::region_size* p = _impl_.padding_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::region_size&>(
      ::ui_serialization::_region_size_default_instance_);
}
inline const ::ui_serialization::region_size& Element::padding() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.padding)
  return _internal_padding();
}
inline void Element::unsafe_arena_set_allocated_padding(
    ::ui_serialization::region_size* padding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.padding_);
  }
  _impl_.padding_ = padding;
  if (padding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.Element.padding)
}
inline ::ui_serialization::region_size* Element::release_padding() {
  
  ::ui_serialization::region_size* temp = _impl_.padding_;
  _impl_.padding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::region_size* Element::unsafe_arena_release_padding() {
  // @@protoc_insertion_point(field_release:ui_serialization.Element.padding)
  
  ::ui_serialization::region_size* temp = _impl_.padding_;
  _impl_.padding_ = nullptr;
  return temp;
}
inline ::ui_serialization::region_size* Element::_internal_mutable_padding() {
  
  if (_impl_.padding_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::region_size>(GetArenaForAllocation());
    _impl_.padding_ = p;
  }
  return _impl_.padding_;
}
inline ::ui_serialization::region_size* Element::mutable_padding() {
  ::ui_serialization::region_size* _msg = _internal_mutable_padding();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.padding)
  return _msg;
}
inline void Element::set_allocated_padding(::ui_serialization::region_size* padding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.padding_;
  }
  if (padding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(padding);
    if (message_arena != submessage_arena) {
      padding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.padding_ = padding;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Element.padding)
}

// repeated .ui_serialization.SkinnedProperty skinned_props = 9;
inline int Element::_internal_skinned_props_size() const {
  return _impl_.skinned_props_.size();
}
inline int Element::skinned_props_size() const {
  return _internal_skinned_props_size();
}
inline void Element::clear_skinned_props() {
  _impl_.skinned_props_.Clear();
}
inline ::ui_serialization::SkinnedProperty* Element::mutable_skinned_props(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.skinned_props)
  return _impl_.skinned_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >*
Element::mutable_skinned_props() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.Element.skinned_props)
  return &_impl_.skinned_props_;
}
inline const ::ui_serialization::SkinnedProperty& Element::_internal_skinned_props(int index) const {
  return _impl_.skinned_props_.Get(index);
}
inline const ::ui_serialization::SkinnedProperty& Element::skinned_props(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.skinned_props)
  return _internal_skinned_props(index);
}
inline ::ui_serialization::SkinnedProperty* Element::_internal_add_skinned_props() {
  return _impl_.skinned_props_.Add();
}
inline ::ui_serialization::SkinnedProperty* Element::add_skinned_props() {
  ::ui_serialization::SkinnedProperty* _add = _internal_add_skinned_props();
  // @@protoc_insertion_point(field_add:ui_serialization.Element.skinned_props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::SkinnedProperty >&
Element::skinned_props() const {
  // @@protoc_insertion_point(field_list:ui_serialization.Element.skinned_props)
  return _impl_.skinned_props_;
}

// repeated .ui_serialization.StyleColor styled_props = 10;
inline int Element::_internal_styled_props_size() const {
  return _impl_.styled_props_.size();
}
inline int Element::styled_props_size() const {
  return _internal_styled_props_size();
}
inline void Element::clear_styled_props() {
  _impl_.styled_props_.Clear();
}
inline ::ui_serialization::StyleColor* Element::mutable_styled_props(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.styled_props)
  return _impl_.styled_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >*
Element::mutable_styled_props() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.Element.styled_props)
  return &_impl_.styled_props_;
}
inline const ::ui_serialization::StyleColor& Element::_internal_styled_props(int index) const {
  return _impl_.styled_props_.Get(index);
}
inline const ::ui_serialization::StyleColor& Element::styled_props(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.styled_props)
  return _internal_styled_props(index);
}
inline ::ui_serialization::StyleColor* Element::_internal_add_styled_props() {
  return _impl_.styled_props_.Add();
}
inline ::ui_serialization::StyleColor* Element::add_styled_props() {
  ::ui_serialization::StyleColor* _add = _internal_add_styled_props();
  // @@protoc_insertion_point(field_add:ui_serialization.Element.styled_props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::StyleColor >&
Element::styled_props() const {
  // @@protoc_insertion_point(field_list:ui_serialization.Element.styled_props)
  return _impl_.styled_props_;
}

// string label = 11;
inline void Element::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& Element::label() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ui_serialization.Element.label)
}
inline std::string* Element::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Element.label)
  return _s;
}
inline const std::string& Element::_internal_label() const {
  return _impl_.label_.Get();
}
inline void Element::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_label() {
  // @@protoc_insertion_point(field_release:ui_serialization.Element.label)
  return _impl_.label_.Release();
}
inline void Element::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Element.label)
}

// uint32 text_align = 12;
inline void Element::clear_text_align() {
  _impl_.text_align_ = 0u;
}
inline uint32_t Element::_internal_text_align() const {
  return _impl_.text_align_;
}
inline uint32_t Element::text_align() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.text_align)
  return _internal_text_align();
}
inline void Element::_internal_set_text_align(uint32_t value) {
  
  _impl_.text_align_ = value;
}
inline void Element::set_text_align(uint32_t value) {
  _internal_set_text_align(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.text_align)
}

// float width = 13;
inline void Element::clear_width() {
  _impl_.width_ = 0;
}
inline float Element::_internal_width() const {
  return _impl_.width_;
}
inline float Element::width() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.width)
  return _internal_width();
}
inline void Element::_internal_set_width(float value) {
  
  _impl_.width_ = value;
}
inline void Element::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.width)
}

// float height = 14;
inline void Element::clear_height() {
  _impl_.height_ = 0;
}
inline float Element::_internal_height() const {
  return _impl_.height_;
}
inline float Element::height() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Element.height)
  return _internal_height();
}
inline void Element::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void Element::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ui_serialization.Element.height)
}

// -------------------------------------------------------------------

// Widget

// .ui_serialization.WidgetBase widget = 1;
inline bool Widget::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool Widget::has_widget() const {
  return _internal_has_widget();
}
inline void Widget::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::ui_serialization::WidgetBase& Widget::_internal_widget() const {
  const ::ui_serialization::WidgetBase* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::ui_serialization::WidgetBase&>(
      ::ui_serialization::_WidgetBase_default_instance_);
}
inline const ::ui_serialization::WidgetBase& Widget::widget() const {
  // @@protoc_insertion_point(field_get:ui_serialization.Widget.widget)
  return _internal_widget();
}
inline void Widget::unsafe_arena_set_allocated_widget(
    ::ui_serialization::WidgetBase* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ui_serialization.Widget.widget)
}
inline ::ui_serialization::WidgetBase* Widget::release_widget() {
  
  ::ui_serialization::WidgetBase* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ui_serialization::WidgetBase* Widget::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:ui_serialization.Widget.widget)
  
  ::ui_serialization::WidgetBase* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::ui_serialization::WidgetBase* Widget::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::ui_serialization::WidgetBase>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::ui_serialization::WidgetBase* Widget::mutable_widget() {
  ::ui_serialization::WidgetBase* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:ui_serialization.Widget.widget)
  return _msg;
}
inline void Widget::set_allocated_widget(::ui_serialization::WidgetBase* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:ui_serialization.Widget.widget)
}

// repeated .ui_serialization.Element elements = 2;
inline int Widget::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int Widget::elements_size() const {
  return _internal_elements_size();
}
inline void Widget::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::ui_serialization::Element* Widget::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.Widget.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Element >*
Widget::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.Widget.elements)
  return &_impl_.elements_;
}
inline const ::ui_serialization::Element& Widget::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::ui_serialization::Element& Widget::elements(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.Widget.elements)
  return _internal_elements(index);
}
inline ::ui_serialization::Element* Widget::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::ui_serialization::Element* Widget::add_elements() {
  ::ui_serialization::Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:ui_serialization.Widget.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Element >&
Widget::elements() const {
  // @@protoc_insertion_point(field_list:ui_serialization.Widget.elements)
  return _impl_.elements_;
}

// -------------------------------------------------------------------

// SerializedUI

// repeated .ui_serialization.Font fonts = 1;
inline int SerializedUI::_internal_fonts_size() const {
  return _impl_.fonts_.size();
}
inline int SerializedUI::fonts_size() const {
  return _internal_fonts_size();
}
inline void SerializedUI::clear_fonts() {
  _impl_.fonts_.Clear();
}
inline ::ui_serialization::Font* SerializedUI::mutable_fonts(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.SerializedUI.fonts)
  return _impl_.fonts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Font >*
SerializedUI::mutable_fonts() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.SerializedUI.fonts)
  return &_impl_.fonts_;
}
inline const ::ui_serialization::Font& SerializedUI::_internal_fonts(int index) const {
  return _impl_.fonts_.Get(index);
}
inline const ::ui_serialization::Font& SerializedUI::fonts(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.SerializedUI.fonts)
  return _internal_fonts(index);
}
inline ::ui_serialization::Font* SerializedUI::_internal_add_fonts() {
  return _impl_.fonts_.Add();
}
inline ::ui_serialization::Font* SerializedUI::add_fonts() {
  ::ui_serialization::Font* _add = _internal_add_fonts();
  // @@protoc_insertion_point(field_add:ui_serialization.SerializedUI.fonts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Font >&
SerializedUI::fonts() const {
  // @@protoc_insertion_point(field_list:ui_serialization.SerializedUI.fonts)
  return _impl_.fonts_;
}

// repeated .ui_serialization.Widget widgets = 2;
inline int SerializedUI::_internal_widgets_size() const {
  return _impl_.widgets_.size();
}
inline int SerializedUI::widgets_size() const {
  return _internal_widgets_size();
}
inline void SerializedUI::clear_widgets() {
  _impl_.widgets_.Clear();
}
inline ::ui_serialization::Widget* SerializedUI::mutable_widgets(int index) {
  // @@protoc_insertion_point(field_mutable:ui_serialization.SerializedUI.widgets)
  return _impl_.widgets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Widget >*
SerializedUI::mutable_widgets() {
  // @@protoc_insertion_point(field_mutable_list:ui_serialization.SerializedUI.widgets)
  return &_impl_.widgets_;
}
inline const ::ui_serialization::Widget& SerializedUI::_internal_widgets(int index) const {
  return _impl_.widgets_.Get(index);
}
inline const ::ui_serialization::Widget& SerializedUI::widgets(int index) const {
  // @@protoc_insertion_point(field_get:ui_serialization.SerializedUI.widgets)
  return _internal_widgets(index);
}
inline ::ui_serialization::Widget* SerializedUI::_internal_add_widgets() {
  return _impl_.widgets_.Add();
}
inline ::ui_serialization::Widget* SerializedUI::add_widgets() {
  ::ui_serialization::Widget* _add = _internal_add_widgets();
  // @@protoc_insertion_point(field_add:ui_serialization.SerializedUI.widgets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ui_serialization::Widget >&
SerializedUI::widgets() const {
  // @@protoc_insertion_point(field_list:ui_serialization.SerializedUI.widgets)
  return _impl_.widgets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ui_serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IndieGoUI_2eproto
