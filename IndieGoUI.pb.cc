// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IndieGoUI.proto

#include "IndieGoUI.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ui_serialization {
PROTOBUF_CONSTEXPR region::region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.h_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct regionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR regionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~regionDefaultTypeInternal() {}
  union {
    region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 regionDefaultTypeInternal _region_default_instance_;
PROTOBUF_CONSTEXPR StyleColor::StyleColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StyleColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleColorDefaultTypeInternal() {}
  union {
    StyleColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleColorDefaultTypeInternal _StyleColor_default_instance_;
PROTOBUF_CONSTEXPR SkinImage::SkinImage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crop_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkinImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkinImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkinImageDefaultTypeInternal() {}
  union {
    SkinImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkinImageDefaultTypeInternal _SkinImage_default_instance_;
PROTOBUF_CONSTEXPR SkinnedProperty::SkinnedProperty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.img_)*/nullptr
  , /*decltype(_impl_.prop_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkinnedPropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkinnedPropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkinnedPropertyDefaultTypeInternal() {}
  union {
    SkinnedProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkinnedPropertyDefaultTypeInternal _SkinnedProperty_default_instance_;
PROTOBUF_CONSTEXPR WidgetBase::WidgetBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rows_heights_)*/{}
  , /*decltype(_impl_._rows_heights_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skinned_props_)*/{}
  , /*decltype(_impl_.styled_props_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_loc_)*/nullptr
  , /*decltype(_impl_.bordered_)*/false
  , /*decltype(_impl_.titled_)*/false
  , /*decltype(_impl_.minimizable_)*/false
  , /*decltype(_impl_.scalable_)*/false
  , /*decltype(_impl_.movable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WidgetBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WidgetBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WidgetBaseDefaultTypeInternal() {}
  union {
    WidgetBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WidgetBaseDefaultTypeInternal _WidgetBase_default_instance_;
PROTOBUF_CONSTEXPR Element::Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skinned_props_)*/{}
  , /*decltype(_impl_.styled_props_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.add_on_new_row_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElementDefaultTypeInternal() {}
  union {
    Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElementDefaultTypeInternal _Element_default_instance_;
PROTOBUF_CONSTEXPR Widget::Widget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WidgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WidgetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WidgetDefaultTypeInternal() {}
  union {
    Widget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WidgetDefaultTypeInternal _Widget_default_instance_;
PROTOBUF_CONSTEXPR SerializedUI::SerializedUI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.widgets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SerializedUIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedUIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedUIDefaultTypeInternal() {}
  union {
    SerializedUI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedUIDefaultTypeInternal _SerializedUI_default_instance_;
}  // namespace ui_serialization
static ::_pb::Metadata file_level_metadata_IndieGoUI_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_IndieGoUI_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_IndieGoUI_2eproto = nullptr;

const uint32_t TableStruct_IndieGoUI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::region, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::region, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::region, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::region, _impl_.h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::StyleColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::StyleColor, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::StyleColor, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::StyleColor, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::StyleColor, _impl_.a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SkinImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SkinImage, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SkinImage, _impl_.crop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SkinnedProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SkinnedProperty, _impl_.img_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SkinnedProperty, _impl_.prop_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.size_loc_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.bordered_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.titled_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.minimizable_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.scalable_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.movable_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.rows_heights_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.skinned_props_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::WidgetBase, _impl_.styled_props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _impl_.widget_name_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _impl_.add_on_new_row_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _impl_.skinned_props_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Element, _impl_.styled_props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Widget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Widget, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::ui_serialization::Widget, _impl_.elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SerializedUI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::ui_serialization::SerializedUI, _impl_.widgets_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ui_serialization::region)},
  { 12, -1, -1, sizeof(::ui_serialization::StyleColor)},
  { 24, -1, -1, sizeof(::ui_serialization::SkinImage)},
  { 34, -1, -1, sizeof(::ui_serialization::SkinnedProperty)},
  { 44, -1, -1, sizeof(::ui_serialization::WidgetBase)},
  { 62, -1, -1, sizeof(::ui_serialization::Element)},
  { 76, -1, -1, sizeof(::ui_serialization::Widget)},
  { 86, -1, -1, sizeof(::ui_serialization::SerializedUI)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ui_serialization::_region_default_instance_._instance,
  &::ui_serialization::_StyleColor_default_instance_._instance,
  &::ui_serialization::_SkinImage_default_instance_._instance,
  &::ui_serialization::_SkinnedProperty_default_instance_._instance,
  &::ui_serialization::_WidgetBase_default_instance_._instance,
  &::ui_serialization::_Element_default_instance_._instance,
  &::ui_serialization::_Widget_default_instance_._instance,
  &::ui_serialization::_SerializedUI_default_instance_._instance,
};

const char descriptor_table_protodef_IndieGoUI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017IndieGoUI.proto\022\020ui_serialization\"4\n\006r"
  "egion\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001w\030\003 \001(\002\022\t"
  "\n\001h\030\004 \001(\002\"8\n\nStyleColor\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030"
  "\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002\"A\n\tSkinImage"
  "\022\014\n\004path\030\001 \001(\t\022&\n\004crop\030\002 \001(\0132\030.ui_serial"
  "ization.region\"N\n\017SkinnedProperty\022(\n\003img"
  "\030\001 \001(\0132\033.ui_serialization.SkinImage\022\021\n\tp"
  "rop_type\030\002 \001(\r\"\244\002\n\nWidgetBase\022\014\n\004name\030\001 "
  "\001(\t\022*\n\010size_loc\030\002 \001(\0132\030.ui_serialization"
  ".region\022\020\n\010bordered\030\003 \001(\010\022\016\n\006titled\030\004 \001("
  "\010\022\023\n\013minimizable\030\005 \001(\010\022\020\n\010scalable\030\006 \001(\010"
  "\022\017\n\007movable\030\007 \001(\010\022\024\n\014rows_heights\030\010 \003(\r\022"
  "8\n\rskinned_props\030\t \003(\0132!.ui_serializatio"
  "n.SkinnedProperty\0222\n\014styled_props\030\n \003(\0132"
  "\034.ui_serialization.StyleColor\"\300\001\n\007Elemen"
  "t\022\014\n\004name\030\001 \001(\t\022\023\n\013widget_name\030\002 \001(\t\022\014\n\004"
  "type\030\003 \001(\r\022\026\n\016add_on_new_row\030\004 \001(\010\0228\n\rsk"
  "inned_props\030\005 \003(\0132!.ui_serialization.Ski"
  "nnedProperty\0222\n\014styled_props\030\006 \003(\0132\034.ui_"
  "serialization.StyleColor\"c\n\006Widget\022,\n\006wi"
  "dget\030\001 \001(\0132\034.ui_serialization.WidgetBase"
  "\022+\n\010elements\030\002 \003(\0132\031.ui_serialization.El"
  "ement\"9\n\014SerializedUI\022)\n\007widgets\030\001 \003(\0132\030"
  ".ui_serialization.Widgetb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_IndieGoUI_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_IndieGoUI_2eproto = {
    false, false, 952, descriptor_table_protodef_IndieGoUI_2eproto,
    "IndieGoUI.proto",
    &descriptor_table_IndieGoUI_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_IndieGoUI_2eproto::offsets,
    file_level_metadata_IndieGoUI_2eproto, file_level_enum_descriptors_IndieGoUI_2eproto,
    file_level_service_descriptors_IndieGoUI_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_IndieGoUI_2eproto_getter() {
  return &descriptor_table_IndieGoUI_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_IndieGoUI_2eproto(&descriptor_table_IndieGoUI_2eproto);
namespace ui_serialization {

// ===================================================================

class region::_Internal {
 public:
};

region::region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.region)
}
region::region(const region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  region* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.w_){}
    , decltype(_impl_.h_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.h_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.h_));
  // @@protoc_insertion_point(copy_constructor:ui_serialization.region)
}

inline void region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.w_){0}
    , decltype(_impl_.h_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

region::~region() {
  // @@protoc_insertion_point(destructor:ui_serialization.region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void region::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.h_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float w = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  // float h = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = this->_internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.region)
  return target;
}

size_t region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float w = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float h = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = this->_internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*region::GetClassData() const { return &_class_data_; }


void region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<region*>(&to_msg);
  auto& from = static_cast<const region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.region)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = from._internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    _this->_internal_set_h(from._internal_h());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void region::CopyFrom(const region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool region::IsInitialized() const {
  return true;
}

void region::InternalSwap(region* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(region, _impl_.h_)
      + sizeof(region::_impl_.h_)
      - PROTOBUF_FIELD_OFFSET(region, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[0]);
}

// ===================================================================

class StyleColor::_Internal {
 public:
};

StyleColor::StyleColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.StyleColor)
}
StyleColor::StyleColor(const StyleColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyleColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  // @@protoc_insertion_point(copy_constructor:ui_serialization.StyleColor)
}

inline void StyleColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StyleColor::~StyleColor() {
  // @@protoc_insertion_point(destructor:ui_serialization.StyleColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyleColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StyleColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyleColor::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.StyleColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.StyleColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.StyleColor)
  return target;
}

size_t StyleColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.StyleColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyleColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleColor::GetClassData() const { return &_class_data_; }


void StyleColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyleColor*>(&to_msg);
  auto& from = static_cast<const StyleColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.StyleColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = from._internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = from._internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleColor::CopyFrom(const StyleColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.StyleColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleColor::IsInitialized() const {
  return true;
}

void StyleColor::InternalSwap(StyleColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleColor, _impl_.a_)
      + sizeof(StyleColor::_impl_.a_)
      - PROTOBUF_FIELD_OFFSET(StyleColor, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[1]);
}

// ===================================================================

class SkinImage::_Internal {
 public:
  static const ::ui_serialization::region& crop(const SkinImage* msg);
};

const ::ui_serialization::region&
SkinImage::_Internal::crop(const SkinImage* msg) {
  return *msg->_impl_.crop_;
}
SkinImage::SkinImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.SkinImage)
}
SkinImage::SkinImage(const SkinImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkinImage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.crop_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_crop()) {
    _this->_impl_.crop_ = new ::ui_serialization::region(*from._impl_.crop_);
  }
  // @@protoc_insertion_point(copy_constructor:ui_serialization.SkinImage)
}

inline void SkinImage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.crop_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkinImage::~SkinImage() {
  // @@protoc_insertion_point(destructor:ui_serialization.SkinImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkinImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.crop_;
}

void SkinImage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkinImage::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.SkinImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.crop_ != nullptr) {
    delete _impl_.crop_;
  }
  _impl_.crop_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkinImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ui_serialization.SkinImage.path"));
        } else
          goto handle_unusual;
        continue;
      // .ui_serialization.region crop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkinImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.SkinImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ui_serialization.SkinImage.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .ui_serialization.region crop = 2;
  if (this->_internal_has_crop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::crop(this),
        _Internal::crop(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.SkinImage)
  return target;
}

size_t SkinImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.SkinImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .ui_serialization.region crop = 2;
  if (this->_internal_has_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.crop_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkinImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkinImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkinImage::GetClassData() const { return &_class_data_; }


void SkinImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkinImage*>(&to_msg);
  auto& from = static_cast<const SkinImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.SkinImage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_crop()) {
    _this->_internal_mutable_crop()->::ui_serialization::region::MergeFrom(
        from._internal_crop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkinImage::CopyFrom(const SkinImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.SkinImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinImage::IsInitialized() const {
  return true;
}

void SkinImage::InternalSwap(SkinImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.crop_, other->_impl_.crop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkinImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[2]);
}

// ===================================================================

class SkinnedProperty::_Internal {
 public:
  static const ::ui_serialization::SkinImage& img(const SkinnedProperty* msg);
};

const ::ui_serialization::SkinImage&
SkinnedProperty::_Internal::img(const SkinnedProperty* msg) {
  return *msg->_impl_.img_;
}
SkinnedProperty::SkinnedProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.SkinnedProperty)
}
SkinnedProperty::SkinnedProperty(const SkinnedProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkinnedProperty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.img_){nullptr}
    , decltype(_impl_.prop_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_img()) {
    _this->_impl_.img_ = new ::ui_serialization::SkinImage(*from._impl_.img_);
  }
  _this->_impl_.prop_type_ = from._impl_.prop_type_;
  // @@protoc_insertion_point(copy_constructor:ui_serialization.SkinnedProperty)
}

inline void SkinnedProperty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.img_){nullptr}
    , decltype(_impl_.prop_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkinnedProperty::~SkinnedProperty() {
  // @@protoc_insertion_point(destructor:ui_serialization.SkinnedProperty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkinnedProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.img_;
}

void SkinnedProperty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkinnedProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.SkinnedProperty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.img_ != nullptr) {
    delete _impl_.img_;
  }
  _impl_.img_ = nullptr;
  _impl_.prop_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkinnedProperty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ui_serialization.SkinImage img = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_img(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prop_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.prop_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkinnedProperty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.SkinnedProperty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ui_serialization.SkinImage img = 1;
  if (this->_internal_has_img()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::img(this),
        _Internal::img(this).GetCachedSize(), target, stream);
  }

  // uint32 prop_type = 2;
  if (this->_internal_prop_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prop_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.SkinnedProperty)
  return target;
}

size_t SkinnedProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.SkinnedProperty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ui_serialization.SkinImage img = 1;
  if (this->_internal_has_img()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.img_);
  }

  // uint32 prop_type = 2;
  if (this->_internal_prop_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prop_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkinnedProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkinnedProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkinnedProperty::GetClassData() const { return &_class_data_; }


void SkinnedProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkinnedProperty*>(&to_msg);
  auto& from = static_cast<const SkinnedProperty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.SkinnedProperty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_img()) {
    _this->_internal_mutable_img()->::ui_serialization::SkinImage::MergeFrom(
        from._internal_img());
  }
  if (from._internal_prop_type() != 0) {
    _this->_internal_set_prop_type(from._internal_prop_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkinnedProperty::CopyFrom(const SkinnedProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.SkinnedProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinnedProperty::IsInitialized() const {
  return true;
}

void SkinnedProperty::InternalSwap(SkinnedProperty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkinnedProperty, _impl_.prop_type_)
      + sizeof(SkinnedProperty::_impl_.prop_type_)
      - PROTOBUF_FIELD_OFFSET(SkinnedProperty, _impl_.img_)>(
          reinterpret_cast<char*>(&_impl_.img_),
          reinterpret_cast<char*>(&other->_impl_.img_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkinnedProperty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[3]);
}

// ===================================================================

class WidgetBase::_Internal {
 public:
  static const ::ui_serialization::region& size_loc(const WidgetBase* msg);
};

const ::ui_serialization::region&
WidgetBase::_Internal::size_loc(const WidgetBase* msg) {
  return *msg->_impl_.size_loc_;
}
WidgetBase::WidgetBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.WidgetBase)
}
WidgetBase::WidgetBase(const WidgetBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WidgetBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rows_heights_){from._impl_.rows_heights_}
    , /*decltype(_impl_._rows_heights_cached_byte_size_)*/{0}
    , decltype(_impl_.skinned_props_){from._impl_.skinned_props_}
    , decltype(_impl_.styled_props_){from._impl_.styled_props_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_loc_){nullptr}
    , decltype(_impl_.bordered_){}
    , decltype(_impl_.titled_){}
    , decltype(_impl_.minimizable_){}
    , decltype(_impl_.scalable_){}
    , decltype(_impl_.movable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_size_loc()) {
    _this->_impl_.size_loc_ = new ::ui_serialization::region(*from._impl_.size_loc_);
  }
  ::memcpy(&_impl_.bordered_, &from._impl_.bordered_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.movable_) -
    reinterpret_cast<char*>(&_impl_.bordered_)) + sizeof(_impl_.movable_));
  // @@protoc_insertion_point(copy_constructor:ui_serialization.WidgetBase)
}

inline void WidgetBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rows_heights_){arena}
    , /*decltype(_impl_._rows_heights_cached_byte_size_)*/{0}
    , decltype(_impl_.skinned_props_){arena}
    , decltype(_impl_.styled_props_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_loc_){nullptr}
    , decltype(_impl_.bordered_){false}
    , decltype(_impl_.titled_){false}
    , decltype(_impl_.minimizable_){false}
    , decltype(_impl_.scalable_){false}
    , decltype(_impl_.movable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WidgetBase::~WidgetBase() {
  // @@protoc_insertion_point(destructor:ui_serialization.WidgetBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WidgetBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rows_heights_.~RepeatedField();
  _impl_.skinned_props_.~RepeatedPtrField();
  _impl_.styled_props_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.size_loc_;
}

void WidgetBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WidgetBase::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.WidgetBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rows_heights_.Clear();
  _impl_.skinned_props_.Clear();
  _impl_.styled_props_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.size_loc_ != nullptr) {
    delete _impl_.size_loc_;
  }
  _impl_.size_loc_ = nullptr;
  ::memset(&_impl_.bordered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.movable_) -
      reinterpret_cast<char*>(&_impl_.bordered_)) + sizeof(_impl_.movable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WidgetBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ui_serialization.WidgetBase.name"));
        } else
          goto handle_unusual;
        continue;
      // .ui_serialization.region size_loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bordered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bordered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool titled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.titled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool minimizable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.minimizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool scalable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.scalable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool movable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.movable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 rows_heights = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rows_heights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_rows_heights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ui_serialization.SkinnedProperty skinned_props = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skinned_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ui_serialization.StyleColor styled_props = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styled_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WidgetBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.WidgetBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ui_serialization.WidgetBase.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ui_serialization.region size_loc = 2;
  if (this->_internal_has_size_loc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size_loc(this),
        _Internal::size_loc(this).GetCachedSize(), target, stream);
  }

  // bool bordered = 3;
  if (this->_internal_bordered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bordered(), target);
  }

  // bool titled = 4;
  if (this->_internal_titled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_titled(), target);
  }

  // bool minimizable = 5;
  if (this->_internal_minimizable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_minimizable(), target);
  }

  // bool scalable = 6;
  if (this->_internal_scalable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_scalable(), target);
  }

  // bool movable = 7;
  if (this->_internal_movable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_movable(), target);
  }

  // repeated uint32 rows_heights = 8;
  {
    int byte_size = _impl_._rows_heights_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_rows_heights(), byte_size, target);
    }
  }

  // repeated .ui_serialization.SkinnedProperty skinned_props = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skinned_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_skinned_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ui_serialization.StyleColor styled_props = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_styled_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_styled_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.WidgetBase)
  return target;
}

size_t WidgetBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.WidgetBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rows_heights = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.rows_heights_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rows_heights_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .ui_serialization.SkinnedProperty skinned_props = 9;
  total_size += 1UL * this->_internal_skinned_props_size();
  for (const auto& msg : this->_impl_.skinned_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ui_serialization.StyleColor styled_props = 10;
  total_size += 1UL * this->_internal_styled_props_size();
  for (const auto& msg : this->_impl_.styled_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ui_serialization.region size_loc = 2;
  if (this->_internal_has_size_loc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_loc_);
  }

  // bool bordered = 3;
  if (this->_internal_bordered() != 0) {
    total_size += 1 + 1;
  }

  // bool titled = 4;
  if (this->_internal_titled() != 0) {
    total_size += 1 + 1;
  }

  // bool minimizable = 5;
  if (this->_internal_minimizable() != 0) {
    total_size += 1 + 1;
  }

  // bool scalable = 6;
  if (this->_internal_scalable() != 0) {
    total_size += 1 + 1;
  }

  // bool movable = 7;
  if (this->_internal_movable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WidgetBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WidgetBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WidgetBase::GetClassData() const { return &_class_data_; }


void WidgetBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WidgetBase*>(&to_msg);
  auto& from = static_cast<const WidgetBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.WidgetBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rows_heights_.MergeFrom(from._impl_.rows_heights_);
  _this->_impl_.skinned_props_.MergeFrom(from._impl_.skinned_props_);
  _this->_impl_.styled_props_.MergeFrom(from._impl_.styled_props_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_size_loc()) {
    _this->_internal_mutable_size_loc()->::ui_serialization::region::MergeFrom(
        from._internal_size_loc());
  }
  if (from._internal_bordered() != 0) {
    _this->_internal_set_bordered(from._internal_bordered());
  }
  if (from._internal_titled() != 0) {
    _this->_internal_set_titled(from._internal_titled());
  }
  if (from._internal_minimizable() != 0) {
    _this->_internal_set_minimizable(from._internal_minimizable());
  }
  if (from._internal_scalable() != 0) {
    _this->_internal_set_scalable(from._internal_scalable());
  }
  if (from._internal_movable() != 0) {
    _this->_internal_set_movable(from._internal_movable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WidgetBase::CopyFrom(const WidgetBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.WidgetBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidgetBase::IsInitialized() const {
  return true;
}

void WidgetBase::InternalSwap(WidgetBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rows_heights_.InternalSwap(&other->_impl_.rows_heights_);
  _impl_.skinned_props_.InternalSwap(&other->_impl_.skinned_props_);
  _impl_.styled_props_.InternalSwap(&other->_impl_.styled_props_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WidgetBase, _impl_.movable_)
      + sizeof(WidgetBase::_impl_.movable_)
      - PROTOBUF_FIELD_OFFSET(WidgetBase, _impl_.size_loc_)>(
          reinterpret_cast<char*>(&_impl_.size_loc_),
          reinterpret_cast<char*>(&other->_impl_.size_loc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WidgetBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[4]);
}

// ===================================================================

class Element::_Internal {
 public:
};

Element::Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.Element)
}
Element::Element(const Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skinned_props_){from._impl_.skinned_props_}
    , decltype(_impl_.styled_props_){from._impl_.styled_props_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.widget_name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.add_on_new_row_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.widget_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.widget_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_widget_name().empty()) {
    _this->_impl_.widget_name_.Set(from._internal_widget_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.add_on_new_row_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.add_on_new_row_));
  // @@protoc_insertion_point(copy_constructor:ui_serialization.Element)
}

inline void Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skinned_props_){arena}
    , decltype(_impl_.styled_props_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.widget_name_){}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.add_on_new_row_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.widget_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.widget_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Element::~Element() {
  // @@protoc_insertion_point(destructor:ui_serialization.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skinned_props_.~RepeatedPtrField();
  _impl_.styled_props_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.widget_name_.Destroy();
}

void Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Element::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skinned_props_.Clear();
  _impl_.styled_props_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.widget_name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.add_on_new_row_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.add_on_new_row_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ui_serialization.Element.name"));
        } else
          goto handle_unusual;
        continue;
      // string widget_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_widget_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ui_serialization.Element.widget_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool add_on_new_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.add_on_new_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ui_serialization.SkinnedProperty skinned_props = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skinned_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ui_serialization.StyleColor styled_props = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styled_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ui_serialization.Element.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string widget_name = 2;
  if (!this->_internal_widget_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_widget_name().data(), static_cast<int>(this->_internal_widget_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ui_serialization.Element.widget_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_widget_name(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // bool add_on_new_row = 4;
  if (this->_internal_add_on_new_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_add_on_new_row(), target);
  }

  // repeated .ui_serialization.SkinnedProperty skinned_props = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skinned_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_skinned_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ui_serialization.StyleColor styled_props = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_styled_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_styled_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.Element)
  return target;
}

size_t Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.Element)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ui_serialization.SkinnedProperty skinned_props = 5;
  total_size += 1UL * this->_internal_skinned_props_size();
  for (const auto& msg : this->_impl_.skinned_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ui_serialization.StyleColor styled_props = 6;
  total_size += 1UL * this->_internal_styled_props_size();
  for (const auto& msg : this->_impl_.styled_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string widget_name = 2;
  if (!this->_internal_widget_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_widget_name());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // bool add_on_new_row = 4;
  if (this->_internal_add_on_new_row() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Element::GetClassData() const { return &_class_data_; }


void Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Element*>(&to_msg);
  auto& from = static_cast<const Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skinned_props_.MergeFrom(from._impl_.skinned_props_);
  _this->_impl_.styled_props_.MergeFrom(from._impl_.styled_props_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_widget_name().empty()) {
    _this->_internal_set_widget_name(from._internal_widget_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_add_on_new_row() != 0) {
    _this->_internal_set_add_on_new_row(from._internal_add_on_new_row());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Element::CopyFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element::IsInitialized() const {
  return true;
}

void Element::InternalSwap(Element* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skinned_props_.InternalSwap(&other->_impl_.skinned_props_);
  _impl_.styled_props_.InternalSwap(&other->_impl_.styled_props_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.widget_name_, lhs_arena,
      &other->_impl_.widget_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Element, _impl_.add_on_new_row_)
      + sizeof(Element::_impl_.add_on_new_row_)
      - PROTOBUF_FIELD_OFFSET(Element, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[5]);
}

// ===================================================================

class Widget::_Internal {
 public:
  static const ::ui_serialization::WidgetBase& widget(const Widget* msg);
};

const ::ui_serialization::WidgetBase&
Widget::_Internal::widget(const Widget* msg) {
  return *msg->_impl_.widget_;
}
Widget::Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.Widget)
}
Widget::Widget(const Widget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Widget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){from._impl_.elements_}
    , decltype(_impl_.widget_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::ui_serialization::WidgetBase(*from._impl_.widget_);
  }
  // @@protoc_insertion_point(copy_constructor:ui_serialization.Widget)
}

inline void Widget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){arena}
    , decltype(_impl_.widget_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Widget::~Widget() {
  // @@protoc_insertion_point(destructor:ui_serialization.Widget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Widget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elements_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.widget_;
}

void Widget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Widget::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.Widget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Widget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ui_serialization.WidgetBase widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ui_serialization.Element elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Widget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.Widget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ui_serialization.WidgetBase widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // repeated .ui_serialization.Element elements = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.Widget)
  return target;
}

size_t Widget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.Widget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ui_serialization.Element elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_impl_.elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ui_serialization.WidgetBase widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Widget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Widget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Widget::GetClassData() const { return &_class_data_; }


void Widget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Widget*>(&to_msg);
  auto& from = static_cast<const Widget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.Widget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elements_.MergeFrom(from._impl_.elements_);
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::ui_serialization::WidgetBase::MergeFrom(
        from._internal_widget());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Widget::CopyFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Widget::IsInitialized() const {
  return true;
}

void Widget::InternalSwap(Widget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
  swap(_impl_.widget_, other->_impl_.widget_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Widget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[6]);
}

// ===================================================================

class SerializedUI::_Internal {
 public:
};

SerializedUI::SerializedUI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ui_serialization.SerializedUI)
}
SerializedUI::SerializedUI(const SerializedUI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SerializedUI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.widgets_){from._impl_.widgets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ui_serialization.SerializedUI)
}

inline void SerializedUI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.widgets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SerializedUI::~SerializedUI() {
  // @@protoc_insertion_point(destructor:ui_serialization.SerializedUI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedUI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.widgets_.~RepeatedPtrField();
}

void SerializedUI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedUI::Clear() {
// @@protoc_insertion_point(message_clear_start:ui_serialization.SerializedUI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.widgets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedUI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ui_serialization.Widget widgets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_widgets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerializedUI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ui_serialization.SerializedUI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ui_serialization.Widget widgets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_widgets_size()); i < n; i++) {
    const auto& repfield = this->_internal_widgets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ui_serialization.SerializedUI)
  return target;
}

size_t SerializedUI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ui_serialization.SerializedUI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ui_serialization.Widget widgets = 1;
  total_size += 1UL * this->_internal_widgets_size();
  for (const auto& msg : this->_impl_.widgets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedUI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SerializedUI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedUI::GetClassData() const { return &_class_data_; }


void SerializedUI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SerializedUI*>(&to_msg);
  auto& from = static_cast<const SerializedUI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ui_serialization.SerializedUI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.widgets_.MergeFrom(from._impl_.widgets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedUI::CopyFrom(const SerializedUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ui_serialization.SerializedUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedUI::IsInitialized() const {
  return true;
}

void SerializedUI::InternalSwap(SerializedUI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.widgets_.InternalSwap(&other->_impl_.widgets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedUI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IndieGoUI_2eproto_getter, &descriptor_table_IndieGoUI_2eproto_once,
      file_level_metadata_IndieGoUI_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ui_serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ui_serialization::region*
Arena::CreateMaybeMessage< ::ui_serialization::region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::region >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::StyleColor*
Arena::CreateMaybeMessage< ::ui_serialization::StyleColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::StyleColor >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::SkinImage*
Arena::CreateMaybeMessage< ::ui_serialization::SkinImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::SkinImage >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::SkinnedProperty*
Arena::CreateMaybeMessage< ::ui_serialization::SkinnedProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::SkinnedProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::WidgetBase*
Arena::CreateMaybeMessage< ::ui_serialization::WidgetBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::WidgetBase >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::Element*
Arena::CreateMaybeMessage< ::ui_serialization::Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::Element >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::Widget*
Arena::CreateMaybeMessage< ::ui_serialization::Widget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::Widget >(arena);
}
template<> PROTOBUF_NOINLINE ::ui_serialization::SerializedUI*
Arena::CreateMaybeMessage< ::ui_serialization::SerializedUI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ui_serialization::SerializedUI >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
